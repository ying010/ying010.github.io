import{_ as a,n as e,p as i,a0 as h}from"./framework-76e35361.js";const r={},d=h('<h1 id="vue概览" tabindex="-1"><a class="header-anchor" href="#vue概览" aria-hidden="true">#</a> VUE概览</h1><h2 id="一、计算属性" tabindex="-1"><a class="header-anchor" href="#一、计算属性" aria-hidden="true">#</a> 一、计算属性</h2><h3 id="_1-1-计算属性的本质" tabindex="-1"><a class="header-anchor" href="#_1-1-计算属性的本质" aria-hidden="true">#</a> 1.1. 计算属性的本质</h3><ul><li>fullname：{set(), get()}</li></ul><h3 id="_1-2-计算属性和methods对比" tabindex="-1"><a class="header-anchor" href="#_1-2-计算属性和methods对比" aria-hidden="true">#</a> 1.2. 计算属性和methods对比</h3><ul><li>计算属性多次使用时，只会调用一次</li><li>有缓存</li></ul><h2 id="二、-事件监听" tabindex="-1"><a class="header-anchor" href="#二、-事件监听" aria-hidden="true">#</a> 二、 事件监听</h2><h3 id="_2-1-事件监听基本使用" tabindex="-1"><a class="header-anchor" href="#_2-1-事件监听基本使用" aria-hidden="true">#</a> 2.1 事件监听基本使用</h3><h3 id="_2-2-参数问题" tabindex="-1"><a class="header-anchor" href="#_2-2-参数问题" aria-hidden="true">#</a> 2.2. 参数问题</h3><ul><li>btnClick</li><li>btnClick(event)</li><li>btnClick(abc, event) -&gt; $event</li></ul><h3 id="_2-3-修饰符" tabindex="-1"><a class="header-anchor" href="#_2-3-修饰符" aria-hidden="true">#</a> 2.3. 修饰符</h3><ul><li>stop</li><li>prevent</li><li>.enter</li><li>.once</li><li>.native</li></ul><h2 id="三、-条件判断" tabindex="-1"><a class="header-anchor" href="#三、-条件判断" aria-hidden="true">#</a> 三、 条件判断</h2><h3 id="_3-1-v-if-v-else-if-v-else" tabindex="-1"><a class="header-anchor" href="#_3-1-v-if-v-else-if-v-else" aria-hidden="true">#</a> 3.1 v-if/v-else-if/v-else</h3><h3 id="_3-2-登录小案例" tabindex="-1"><a class="header-anchor" href="#_3-2-登录小案例" aria-hidden="true">#</a> 3.2 登录小案例</h3><h3 id="_3-3-v-show" tabindex="-1"><a class="header-anchor" href="#_3-3-v-show" aria-hidden="true">#</a> 3.3 v-show</h3><ul><li>v-show和v-if的区别</li></ul><h2 id="四、循环遍历" tabindex="-1"><a class="header-anchor" href="#四、循环遍历" aria-hidden="true">#</a> 四、循环遍历</h2><h3 id="_4-1-遍历数组" tabindex="-1"><a class="header-anchor" href="#_4-1-遍历数组" aria-hidden="true">#</a> 4.1 遍历数组</h3><h3 id="_4-2-遍历对象" tabindex="-1"><a class="header-anchor" href="#_4-2-遍历对象" aria-hidden="true">#</a> 4.2 遍历对象</h3><ul><li>value</li><li>value, key</li><li>value, key, index</li></ul><h3 id="_4-3-数组那些方法是响应式的" tabindex="-1"><a class="header-anchor" href="#_4-3-数组那些方法是响应式的" aria-hidden="true">#</a> 4.3. 数组那些方法是响应式的</h3><h3 id="_4-4-作业完成" tabindex="-1"><a class="header-anchor" href="#_4-4-作业完成" aria-hidden="true">#</a> 4.4 作业完成</h3><h2 id="五、书籍案例" tabindex="-1"><a class="header-anchor" href="#五、书籍案例" aria-hidden="true">#</a> 五、书籍案例</h2><h2 id="六、-v-model的使用" tabindex="-1"><a class="header-anchor" href="#六、-v-model的使用" aria-hidden="true">#</a> 六、 v-model的使用</h2><h3 id="_6-1-v-model的基本使用" tabindex="-1"><a class="header-anchor" href="#_6-1-v-model的基本使用" aria-hidden="true">#</a> 6.1 v-model的基本使用</h3><ul><li>v-model =&gt; v-bind: value v-on: input</li></ul><h3 id="_6-2-v-model和radio-checkbox-select" tabindex="-1"><a class="header-anchor" href="#_6-2-v-model和radio-checkbox-select" aria-hidden="true">#</a> 6.2 v-model和radio/checkbox/select</h3><h3 id="_6-3-修饰符" tabindex="-1"><a class="header-anchor" href="#_6-3-修饰符" aria-hidden="true">#</a> 6.3 修饰符</h3><ul><li>lazy</li><li>number</li><li>trim</li></ul><h2 id="七、组件化开发" tabindex="-1"><a class="header-anchor" href="#七、组件化开发" aria-hidden="true">#</a> 七、组件化开发</h2><h3 id="_7-1-认识组件化" tabindex="-1"><a class="header-anchor" href="#_7-1-认识组件化" aria-hidden="true">#</a> 7.1 认识组件化</h3><h3 id="_7-2-组件的基本使用" tabindex="-1"><a class="header-anchor" href="#_7-2-组件的基本使用" aria-hidden="true">#</a> 7.2 组件的基本使用</h3><h3 id="_7-3-全局组件和局部组件" tabindex="-1"><a class="header-anchor" href="#_7-3-全局组件和局部组件" aria-hidden="true">#</a> 7.3 全局组件和局部组件</h3><h3 id="_7-4-父组件和子组件" tabindex="-1"><a class="header-anchor" href="#_7-4-父组件和子组件" aria-hidden="true">#</a> 7.4 父组件和子组件</h3><h3 id="_7-5-注册的语法糖" tabindex="-1"><a class="header-anchor" href="#_7-5-注册的语法糖" aria-hidden="true">#</a> 7.5 注册的语法糖</h3><h3 id="_7-6-模板的分类写法" tabindex="-1"><a class="header-anchor" href="#_7-6-模板的分类写法" aria-hidden="true">#</a> 7.6 模板的分类写法</h3><ul><li>script</li><li>template</li></ul><h3 id="_7-7-数据的存放" tabindex="-1"><a class="header-anchor" href="#_7-7-数据的存放" aria-hidden="true">#</a> 7.7 数据的存放</h3><ul><li>子组件不能直接访问父组件</li><li>子组件中有自己的data，而且必须是一个函数</li><li>为什么必须是一个函数</li></ul><h3 id="_7-8-父子组件的通信" tabindex="-1"><a class="header-anchor" href="#_7-8-父子组件的通信" aria-hidden="true">#</a> 7.8 父子组件的通信</h3><ul><li>父传子：props</li><li>子传父：$emit</li></ul><h3 id="_7-9-项目" tabindex="-1"><a class="header-anchor" href="#_7-9-项目" aria-hidden="true">#</a> 7.9 项目</h3><ul><li>npm install</li><li>npm run serve</li></ul><h3 id="_7-10-父子组件的访问" tabindex="-1"><a class="header-anchor" href="#_7-10-父子组件的访问" aria-hidden="true">#</a> 7.10 父子组件的访问</h3><ul><li>children/refs</li><li>parent/root</li></ul><h3 id="_7-11-slot的使用" tabindex="-1"><a class="header-anchor" href="#_7-11-slot的使用" aria-hidden="true">#</a> 7.11 slot的使用</h3><ul><li>基本使用</li><li>具名插槽</li><li>编译的作用域</li><li>作用域插槽</li></ul><h2 id="八、前端模块化" tabindex="-1"><a class="header-anchor" href="#八、前端模块化" aria-hidden="true">#</a> 八、前端模块化</h2><h3 id="_8-1-为什么要使用模块化" tabindex="-1"><a class="header-anchor" href="#_8-1-为什么要使用模块化" aria-hidden="true">#</a> 8.1 为什么要使用模块化</h3><ul><li>简单写js代码带来的问题</li><li>闭包引起代码不可复用</li><li>自己实现了简单的模块话</li><li>AMD/CMD/CommonJS</li></ul><h3 id="_8-2-es6中模块化的使用" tabindex="-1"><a class="header-anchor" href="#_8-2-es6中模块化的使用" aria-hidden="true">#</a> 8.2 ES6中模块化的使用</h3><ul><li>export</li><li>import</li></ul><h2 id="九、webpack" tabindex="-1"><a class="header-anchor" href="#九、webpack" aria-hidden="true">#</a> 九、webpack</h2><h3 id="_9-1-什么是webpack" tabindex="-1"><a class="header-anchor" href="#_9-1-什么是webpack" aria-hidden="true">#</a> 9.1 什么是webpack</h3><ul><li>webpack和gulp的区别</li><li>webpack依赖环境</li></ul><h3 id="_9-2-webpack的起步" tabindex="-1"><a class="header-anchor" href="#_9-2-webpack的起步" aria-hidden="true">#</a> 9.2 webpack的起步</h3><ul><li>webpack命令</li><li>webpack配置：webpack.config.js/package.json(scripts)</li></ul><h3 id="_9-3-webpack的loader" tabindex="-1"><a class="header-anchor" href="#_9-3-webpack的loader" aria-hidden="true">#</a> 9.3 webpack的loader</h3><ul><li>css-loader/style-loader</li><li>less-loader/less</li><li>url-loader/file-loader</li><li>babel-loader</li></ul><h3 id="_9-4-webpack中配置vue" tabindex="-1"><a class="header-anchor" href="#_9-4-webpack中配置vue" aria-hidden="true">#</a> 9.4 webpack中配置VUE</h3><ul><li>vue-loader</li></ul><h3 id="_9-5-webpack-的plugin" tabindex="-1"><a class="header-anchor" href="#_9-5-webpack-的plugin" aria-hidden="true">#</a> 9.5 webpack 的plugin</h3><h3 id="_9-6-搭建本地服务器" tabindex="-1"><a class="header-anchor" href="#_9-6-搭建本地服务器" aria-hidden="true">#</a> 9.6 搭建本地服务器</h3><ul><li>webpack-dev-server</li></ul><h3 id="_9-7-配置文件的分离" tabindex="-1"><a class="header-anchor" href="#_9-7-配置文件的分离" aria-hidden="true">#</a> 9.7 配置文件的分离</h3>',66),l=[d];function n(c,s){return e(),i("div",null,l)}const u=a(r,[["render",n],["__file","vue-base.html.vue"]]);export{u as default};
