import{_ as e,n as d,p as c,a0 as o}from"./framework-76e35361.js";const r={},a=o('<h2 id="grep" tabindex="-1"><a class="header-anchor" href="#grep" aria-hidden="true">#</a> grep</h2><p>grep（global search regular expression(RE) and print out the line）是Linux中常用的文本搜索工具，可以使用正则表达式对文本进行搜索并输出匹配的行或文本。egrep等同于grep -E使用扩展正则表达式。</p><p>格式如下：<code>grep [OPTIONS] &lt;PATTERN&gt; &lt;INPUT_FILE_NAMES&gt;</code></p><h3 id="ere与bre" tabindex="-1"><a class="header-anchor" href="#ere与bre" aria-hidden="true">#</a> ERE与BRE</h3><p>grep默认使用BRE，需要使用ERE时需要加参数<code>-E</code>，egrep使用ERE。</p><ul><li>BRE: 基础正则表达式</li><li>ERE: 扩展正则表达式</li></ul><p>两者的主要区别是转义字符的使用：</p><ul><li><code>?</code> <code>+</code> <code>|</code> <code>{</code> <code>}</code> <code>(</code> <code>)</code></li><li><code>\\?</code> <code>\\+</code> <code>\\|</code> <code>\\{</code> <code>\\}</code> <code>\\(</code> <code>\\)</code></li></ul><p>BRE中前者表示字面量，后者表示特殊含义；ERE反之，即前者表示特殊含义，后者表示字面量。</p><h3 id="命令行选项" tabindex="-1"><a class="header-anchor" href="#命令行选项" aria-hidden="true">#</a> 命令行选项</h3><p>注意：命令行大小写敏感，例如：<code>-e</code> 和<code>-E</code> 是两个不同的命令。</p><h4 id="基本信息" tabindex="-1"><a class="header-anchor" href="#基本信息" aria-hidden="true">#</a> 基本信息</h4><ul><li><code>--helep</code> 获取帮助</li><li><code>-V</code> <code>--version</code> 获取版本号</li></ul><h4 id="匹配表达式控制" tabindex="-1"><a class="header-anchor" href="#匹配表达式控制" aria-hidden="true">#</a> 匹配表达式控制</h4><ul><li><code>-e PATTERN</code> <code>--regexp=PATTERN</code> 明确指出匹配表达式PATTERN。该选项可指定多次。</li></ul>',15),i=[a];function l(h,t){return d(),c("div",null,i)}const p=e(r,[["render",l],["__file","文本操作.html.vue"]]);export{p as default};
