import{_ as t,L as p,n as i,p as o,Q as n,s as a,M as l,a0 as s}from"./framework-76e35361.js";const c={},r=s(`<h1 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka" aria-hidden="true">#</a> Kafka</h1><h2 id="_1-1-spring-boot集成spring-kafka" tabindex="-1"><a class="header-anchor" href="#_1-1-spring-boot集成spring-kafka" aria-hidden="true">#</a> 1.1 spring-boot集成spring-kafka</h2><p>引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加配置信息</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
        <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 192.168.235.128<span class="token punctuation">:</span><span class="token number">9092</span>
        <span class="token key atrule">producer</span><span class="token punctuation">:</span>
          <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">0</span>
          <span class="token key atrule">batch-size</span><span class="token punctuation">:</span> <span class="token number">16384</span>
          <span class="token key atrule">buffer-memory</span><span class="token punctuation">:</span> <span class="token number">33554432</span>
        <span class="token key atrule">consumer</span><span class="token punctuation">:</span>
          <span class="token key atrule">enable-auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
          <span class="token key atrule">heartbeat-interval</span><span class="token punctuation">:</span> <span class="token number">1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生产者:</p><p>由于项目中Kafka使用的是spring-kafka,所以在使用生产者时可以使用Spring提供的KafkaTemplate&lt;K,V&gt;;泛型中的K表示键的类型,V表示值即发送数据的类型,这两种一般使用String即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 生产者
 * <span class="token keyword">@author</span> zhiying
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/study/kafka/producer&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaProducerRest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/send/{topic}/{message}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> topic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> producerRecord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>producerRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费者:</p><p>消费者需要加一个监听注解@KafkaListener</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-2-本地测试" tabindex="-1"><a class="header-anchor" href="#_1-2-本地测试" aria-hidden="true">#</a> 1.2 本地测试</h2><h3 id="_1-2-1-linux安装配置kafka" tabindex="-1"><a class="header-anchor" href="#_1-2-1-linux安装配置kafka" aria-hidden="true">#</a> 1.2.1 Linux安装配置Kafka</h3>`,14),u={href:"https://kafka.apache.org/downloads",target:"_blank",rel:"noopener noreferrer"},d=s(`<li><p>修改配置文件</p><ul><li><p>首先修改broker,broker为唯一的int值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">############################# Server Basics #############################</span>

<span class="token comment"># The id of the broker. This must be set to a unique integer for each broker.</span>
<span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改服务器地址端口号</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">############################# Socket Server Settings #############################</span>

<span class="token comment"># The address the socket server listens on. It will get the value returned from</span>
<span class="token comment"># java.net.InetAddress.getCanonicalHostName() if not configured.</span>
<span class="token comment">#   FORMAT:</span>
<span class="token comment">#     listeners = listener_name://host_name:port</span>
<span class="token comment">#   EXAMPLE:</span>
<span class="token comment">#     listeners = PLAINTEXT://your.host.name:9092</span>
<span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://192.168.235.128:9092
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改zookeeper地址</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">############################# Zookeeper#############################</span>

<span class="token comment"># Zookeeper connection string (see zookeeper docs for details).</span>
<span class="token comment"># This is a comma separated host:port pairs, each corresponding to a zk</span>
<span class="token comment"># server. e.g. &quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;.</span>
<span class="token comment"># You can also append an optional chroot string to the urls to specify the</span>
<span class="token comment"># root directory for all kafka znodes.</span>
<span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span><span class="token number">192.168</span>.235.128:2181,192.168.235.129:2181
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动zookeeper</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./bin/zookeeper-server-start.sh ./config/zookeeper.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>启动Kafka</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./bin/kafka-server-start.sh ./config/server.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li>`,1),k=s('<h1 id="二、kafka概述" tabindex="-1"><a class="header-anchor" href="#二、kafka概述" aria-hidden="true">#</a> 二、Kafka概述</h1><h2 id="_2-1-定义" tabindex="-1"><a class="header-anchor" href="#_2-1-定义" aria-hidden="true">#</a> 2.1 定义</h2><p>Kafka是<strong>分布式</strong>的基于<strong>发布/订阅</strong>模式的<strong>消息队列</strong>，主要用于大数据中信息处理。</p><h2 id="_2-2消息队列" tabindex="-1"><a class="header-anchor" href="#_2-2消息队列" aria-hidden="true">#</a> 2.2消息队列</h2><h3 id="_2-2-1传统消息队列" tabindex="-1"><a class="header-anchor" href="#_2-2-1传统消息队列" aria-hidden="true">#</a> 2.2.1传统消息队列</h3><p>消息队列的好处：</p><ol><li><p>解耦</p></li><li><p>可恢复性</p><p>系统部分组件失效后不影响整个系统，组件回复后可继续处理消息；</p></li><li><p>缓冲</p><p>控制、优化数据流经过系统的速度，解决生产者、消费者速度不一致；主要为生成者速度&gt;消费者。</p></li><li><p>灵活性 &amp; 峰值处理能力</p><p>峰值访问时将信息暂存在消息队列，过后处理。</p></li><li><p>异步通信</p><p>消息放入消息队列可在需要时再处理</p></li></ol><h3 id="_2-2-2消息队列的两种模式" tabindex="-1"><a class="header-anchor" href="#_2-2-2消息队列的两种模式" aria-hidden="true">#</a> 2.2.2消息队列的两种模式</h3><p>1）<strong>点对点模式</strong>（一对一，消费者主动拉取，消费后删除消息）</p><p>2）<strong>发布/订阅模式</strong>（一对多，消费后消息不删除）</p><p>​ （1）消费者主动拉取</p><p>​ 缺点：需要维护常轮询，可能造成资源浪费</p><p>​ 优点：处理速度取决与消费者</p><p>​ （2）队列主动推送</p><p>​ 优点：消费者不用关注是否有新消息</p><p>​ 缺点：处理速度取决于队列，消费者处理速度过慢会错过消息；消费这处理速度过快会浪费资源</p><h1 id="三、kafka组成" tabindex="-1"><a class="header-anchor" href="#三、kafka组成" aria-hidden="true">#</a> 三、Kafka组成</h1><h2 id="_3-1-kafka名词" tabindex="-1"><a class="header-anchor" href="#_3-1-kafka名词" aria-hidden="true">#</a> 3.1 Kafka名词</h2><ul><li><p><strong>Broker</strong> 节点</p><p>Kafka存储的服务节点</p></li><li><p><strong>Topic</strong> 主题</p></li><li><p><strong>Partition</strong> 分区</p></li><li><p><strong>Replication factor</strong> 副本</p></li><li><p><strong>Leader</strong> 主副本</p><p>​ 每个Partition分区会有多个副本，其中Leader是主副本</p></li><li><p><strong>Follower</strong> 从副本</p><p>从副本不能读取,只是用来备份数据,等待成为Leader</p></li><li><p><strong>Producer</strong> 生产者</p></li><li><p><strong>Consumer</strong> 消费者</p></li><li><p><strong>Consumer Group</strong> 消费者组</p><p>同一个消费者组中的消费者对同一消息只能消费一次</p></li><li><p><strong>offset</strong> 偏移量</p><p>记录消费者已消费的消息数</p></li><li><p><strong>ISR</strong> in-sync replica set同步副本</p><p>可以竞争上岗的副本</p></li><li><p><strong>ack</strong></p><p>发送成功策略</p><p>0:不重试,发完就行;</p><p>1:等待lead写完;</p><p>-1(all):等待ISR中的所有副本全都完成,可能造成<strong>重复数据</strong>;</p></li></ul>',19);function m(v,g){const e=p("ExternalLinkIcon");return i(),o("div",null,[r,n("ul",null,[n("li",null,[n("p",null,[a("首先在"),n("a",u,[a("Kafka官网"),l(e)]),a("下载压缩包,并在Linux解压;")])]),d]),k])}const h=t(c,[["render",m],["__file","kafka.html.vue"]]);export{h as default};
