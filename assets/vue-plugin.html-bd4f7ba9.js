import{_ as e,n as a,p as i,a0 as r}from"./framework-76e35361.js";const h={},l=r('<h1 id="vue插件" tabindex="-1"><a class="header-anchor" href="#vue插件" aria-hidden="true">#</a> VUE插件</h1><h2 id="一、-vue-cli" tabindex="-1"><a class="header-anchor" href="#一、-vue-cli" aria-hidden="true">#</a> 一、 Vue CLI</h2><h3 id="_1-1-什么是cli" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是cli" aria-hidden="true">#</a> 1.1 什么是CLI</h3><ul><li>脚手架是什么东西</li><li>CLI依赖 webpack、node、npm</li><li>安装CLI3 -&gt;拉取CLI2模块</li></ul><h4 id="_1-2-cli2初始化项目的过程" tabindex="-1"><a class="header-anchor" href="#_1-2-cli2初始化项目的过程" aria-hidden="true">#</a> 1.2 CLI2初始化项目的过程</h4><h4 id="_1-3-cli2项目目录" tabindex="-1"><a class="header-anchor" href="#_1-3-cli2项目目录" aria-hidden="true">#</a> 1.3 CLI2项目目录</h4><h3 id="_1-4-runtime-compiler和runtime-only的区别" tabindex="-1"><a class="header-anchor" href="#_1-4-runtime-compiler和runtime-only的区别" aria-hidden="true">#</a> 1.4. runtime-compiler和runtime-only的区别</h3><ul><li>runtime-compiler: template -&gt; ast -&gt; render -&gt; virtual dom -&gt; 真实DOM</li><li>runtime-only: render:(h) =&gt; h, -&gt; createElement</li><li>runtime-only: 效率更高、文件更小</li></ul><h3 id="_1-5-vue-cli3" tabindex="-1"><a class="header-anchor" href="#_1-5-vue-cli3" aria-hidden="true">#</a> 1.5 Vue CLI3</h3><ul><li><p>如何通过CLI3创建项目</p><p><code>vue create 项目名</code></p></li><li><p>CLI3的目录结构</p></li><li><p>配置文件：</p><ul><li>1、Vue UI</li><li>2、隐藏的配置文件</li><li>3、自定义vue.config.js</li></ul></li></ul><h2 id="三、-vue-router" tabindex="-1"><a class="header-anchor" href="#三、-vue-router" aria-hidden="true">#</a> 三、 Vue-Router</h2><h3 id="_3-1-什么是前端路由" tabindex="-1"><a class="header-anchor" href="#_3-1-什么是前端路由" aria-hidden="true">#</a> 3.1. 什么是前端路由</h3><ul><li>后端渲染/后端路由</li><li>前后端分离</li><li>SPA/前端路由</li></ul><h3 id="_3-2-路由的基本配置" tabindex="-1"><a class="header-anchor" href="#_3-2-路由的基本配置" aria-hidden="true">#</a> 3.2. 路由的基本配置</h3><ul><li>安装vue-router</li><li>Vue.use -&gt; 创建VueRouter对象 -&gt; 挂载到Vue实例上</li><li>配置映射关系：1、创建组件 2、配置映射关系 3、使用router-ink/router-view</li></ul><h3 id="_3-3-细节处理" tabindex="-1"><a class="header-anchor" href="#_3-3-细节处理" aria-hidden="true">#</a> 3.3. 细节处理</h3><ul><li>默认路由：redirect</li><li>mode: history</li><li>router-link -&gt; tag/replace/active-class</li></ul><h3 id="_3-4-动态路由" tabindex="-1"><a class="header-anchor" href="#_3-4-动态路由" aria-hidden="true">#</a> 3.4. 动态路由</h3><ul><li>/user/:id</li><li>this.$router.params.id</li></ul><h3 id="_3-5-参数的传递" tabindex="-1"><a class="header-anchor" href="#_3-5-参数的传递" aria-hidden="true">#</a> 3.5. 参数的传递</h3><ul><li>params</li><li>query -&gt; URL</li><li>URL: <ul><li>协议://主机:端口/路径？查询</li><li>scheme://host:port/path?query#fragment</li></ul></li></ul><h3 id="_3-6-路由嵌套" tabindex="-1"><a class="header-anchor" href="#_3-6-路由嵌套" aria-hidden="true">#</a> 3.6. 路由嵌套</h3><ul><li>children:[]</li></ul><h3 id="_3-7-导航守卫" tabindex="-1"><a class="header-anchor" href="#_3-7-导航守卫" aria-hidden="true">#</a> 3.7. 导航守卫</h3><ul><li>全局导航守卫</li><li>路由独享守卫</li><li>组件类守卫</li></ul><h3 id="_3-8-kepp-alive" tabindex="-1"><a class="header-anchor" href="#_3-8-kepp-alive" aria-hidden="true">#</a> 3.8. Kepp-alive</h3><h3 id="_3-9-tabbar的封装过程" tabindex="-1"><a class="header-anchor" href="#_3-9-tabbar的封装过程" aria-hidden="true">#</a> 3.9. TabBar的封装过程</h3><h2 id="四、promise" tabindex="-1"><a class="header-anchor" href="#四、promise" aria-hidden="true">#</a> 四、promise</h2><h3 id="_4-1-promise的基本使用" tabindex="-1"><a class="header-anchor" href="#_4-1-promise的基本使用" aria-hidden="true">#</a> 4.1. Promise的基本使用</h3><ul><li>如何将异步操作放入到promise中</li><li>(resolve, reject) =&gt; then/catch</li></ul><h3 id="_4-2-promise的链式调用" tabindex="-1"><a class="header-anchor" href="#_4-2-promise的链式调用" aria-hidden="true">#</a> 4.2. promise的链式调用</h3><h3 id="_4-3-promise的all方法" tabindex="-1"><a class="header-anchor" href="#_4-3-promise的all方法" aria-hidden="true">#</a> 4.3. Promise的all方法</h3><h2 id="五、vuex" tabindex="-1"><a class="header-anchor" href="#五、vuex" aria-hidden="true">#</a> 五、Vuex</h2><h3 id="_5-1-什么是状态管理" tabindex="-1"><a class="header-anchor" href="#_5-1-什么是状态管理" aria-hidden="true">#</a> 5.1. 什么是状态管理</h3><h3 id="_5-2-vuex的基本使用" tabindex="-1"><a class="header-anchor" href="#_5-2-vuex的基本使用" aria-hidden="true">#</a> 5.2. Vuex的基本使用</h3><ul><li>state -&gt; 直接修改state(错误)</li><li>mutations -&gt; devtools</li></ul><h3 id="_5-3-核心概念" tabindex="-1"><a class="header-anchor" href="#_5-3-核心概念" aria-hidden="true">#</a> 5.3. 核心概念</h3><ul><li>state-&gt;单一状态树</li><li>getters -&gt;</li><li>mutations -&gt;</li><li>actions -&gt;异步操作(Promise)</li><li>modules</li></ul><h3 id="_5-4-目录组织方式" tabindex="-1"><a class="header-anchor" href="#_5-4-目录组织方式" aria-hidden="true">#</a> 5.4. 目录组织方式</h3><h2 id="六、axios" tabindex="-1"><a class="header-anchor" href="#六、axios" aria-hidden="true">#</a> 六、axios</h2><h3 id="_6-1-网络请求方式的选择" tabindex="-1"><a class="header-anchor" href="#_6-1-网络请求方式的选择" aria-hidden="true">#</a> 6.1. 网络请求方式的选择</h3><h3 id="_6-2-axios的基本使用" tabindex="-1"><a class="header-anchor" href="#_6-2-axios的基本使用" aria-hidden="true">#</a> 6.2. axios的基本使用</h3><h3 id="_6-3-axios的相关配置" tabindex="-1"><a class="header-anchor" href="#_6-3-axios的相关配置" aria-hidden="true">#</a> 6.3. axios的相关配置</h3><h3 id="_6-4-axios的创建实例" tabindex="-1"><a class="header-anchor" href="#_6-4-axios的创建实例" aria-hidden="true">#</a> 6.4. axios的创建实例</h3><h3 id="_6-5-axios的封装" tabindex="-1"><a class="header-anchor" href="#_6-5-axios的封装" aria-hidden="true">#</a> 6.5. axios的封装</h3>',45),d=[l];function t(n,s){return a(),i("div",null,d)}const c=e(h,[["render",t],["__file","vue-plugin.html.vue"]]);export{c as default};
