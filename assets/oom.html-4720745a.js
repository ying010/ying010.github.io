import{_ as p,L as o,n as c,p as l,Q as n,s,M as e,a0 as t}from"./framework-76e35361.js";const i={},u=n("h1",{id:"内存溢出-oom",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#内存溢出-oom","aria-hidden":"true"},"#"),s(" 内存溢出(OOM)")],-1),d=n("p",null,"在测试环境有个项目占用内存过大，大佬让我处理一下，我在本地启动项目复现问题时发现本地内存不会过高，分析遇到瓶颈。一次偶然机会发现测试环境内存过高但又没超限导致崩溃，就及时在测试环境生成了一个内存快照，并导到本地进行了分析。在生成快照、分析内存快照、分析本地内存不会过高过程中几经坎坷，记录一下。",-1),r=n("h2",{id:"一、生成快照",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、生成快照","aria-hidden":"true"},"#"),s(" 一、生成快照")],-1),k={href:"https://www.eclipse.org/mat/downloads.php",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.eclipse.org/mat/downloads.php",target:"_blank",rel:"noopener noreferrer"},v=t('<p>在生成内存快照时，首先需要分析进程内存占用、GC等是否异常，然后生成快照</p><h3 id="_1-1-分析内存" tabindex="-1"><a class="header-anchor" href="#_1-1-分析内存" aria-hidden="true">#</a> 1.1. 分析内存</h3><p>众所周知JVM内存可分为堆、栈、方法区等(具体的分区就不写了，分析内存溢出一般只会分析堆)，堆又可以分为新生代：Eden，Survivor0、1(S0、S1)和老年代：Old；</p><p>几乎所有新建的对象都会先入Eden区，如果入Eden区时发现已满会执行一次YGC（Minor GC），把可回收内存回收掉，把仍活跃对象存入S0；第二次满时会回收Eden、S0把两者中活跃的放入S1；第三次回收Eden、S1，活跃的放入的S0…依次往复，一个对象如果回收超过15次或回收后空间依旧不够会转存到Old区。</p><p>当Old区满之后会触发Full GC，如果Full GC之后内存仍不够就会抛出OutOfMemoryError错误。</p><p>判断一个程序是否出现内存异常，首先需要查看内存占用情况、GC频率等，常用命令又jps、jstat、jmap等。但是如果项目是部署在docker上而不是直接部署，此时需要进入docker容器中查看。</p><h4 id="_1-1-1-docker" tabindex="-1"><a class="header-anchor" href="#_1-1-1-docker" aria-hidden="true">#</a> 1.1.1 docker</h4><ul><li><p><code>docker stats</code>可以查看进程资源占用：</p><p><img src="https://raw.githubusercontent.com/ying010/pic-repo/master/img/20220407194133.png" alt="image-20210224170454598"></p></li><li><p><code>docker ps</code>显示docker正在运行中的image</p></li><li><p><code>docker exec -it &lt;name&gt; /bin/sh</code>进入容器</p></li></ul><h4 id="_1-1-2-查看内存" tabindex="-1"><a class="header-anchor" href="#_1-1-2-查看内存" aria-hidden="true">#</a> 1.1.2 查看内存</h4>',9),b=n("li",null,[n("p",null,[n("code",null,"jps"),s("查询容器中运行中的进程")])],-1),h=n("code",null,"jstat",-1),f={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,[n("code",null,"jstat [ generalOption | outputOptions vmid [interval[s|ms] [count]] ]")],-1),_=n("p",null,"一般用来查询内存占用时可用如下代码:",-1),w=n("p",null,[n("code",null,"jstat -gcold <pid>")],-1),y=n("p",null,[n("img",{src:"https://raw.githubusercontent.com/ying010/pic-repo/master/img/20220407194008.png",alt:"image-20210225160409703"})],-1),M=n("h4",{id:"_1-1-3-生成内存快照",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-3-生成内存快照","aria-hidden":"true"},"#"),s(" 1.1.3 生成内存快照")],-1),F={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jmap.html",target:"_blank",rel:"noopener noreferrer"},j=n("p",null,"jmap -dump:format=b,file=文件名 [pid]",-1),x=t(`<p>生成快照之后需要将快照文件导入到本地分析,建议让运维帮助导出,文件过大自己导会非常慢。</p><h2 id="二、分析内存快照" tabindex="-1"><a class="header-anchor" href="#二、分析内存快照" aria-hidden="true">#</a> 二、分析内存快照</h2><h3 id="_2-1-分析快照文件" tabindex="-1"><a class="header-anchor" href="#_2-1-分析快照文件" aria-hidden="true">#</a> 2.1 分析快照文件</h3><p>首先使用MAT打开本地的内存快照，选择 leak suspects可以查看系统给出的内存泄露分析，分析中会显示占据内存过多的疑似问题对象;如本次的分析,图中显示<code>IMAPFolder</code>有5510个实例,占用了63.52%的内存:</p><p><img src="https://raw.githubusercontent.com/ying010/pic-repo/master/img/20220407194158.png" alt="image-20210310171657270"></p><p>进入这个异常对象分析一下,发现<code>FatchImapMailThread</code>中持有的<code>IMAPStore</code>对象中有一个数组,里面有3064个<code>IMAPFolder</code>对象;</p><p><img src="https://raw.githubusercontent.com/ying010/pic-repo/master/img/20220407194207.png" alt="image-20210310172239589"></p><p>进入代码中查看:</p><p>在<code>FatchImapMailThread</code>中维持一个永久的循环,每次循环都会重新打开一次文件夹,进入<code>IMAPFolder</code>的open()方法可以查看到会先获取一个协议,在获取协议的时候会把当前的<code>IMAPFolder</code>对象存入一个数组中。因为是在循环中创建的<code>IMAPFolder</code>，每循环一次都会创建一个新的，但是没有进行释放，导致了持有对象过多。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loopLineOn</span><span class="token punctuation">(</span><span class="token class-name">IMAPStore</span> store<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> loopLineOnFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token class-name">IMAPFolder</span> folder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>loopLineOnFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 重新连接</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>store<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    store<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 每次获取最新的 folder</span>
                folder <span class="token operator">=</span> <span class="token function">refreshFolder</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 睡眠一段时间再获取</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token constant">DELAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 获取当前邮箱邮件数量</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>folder<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 每次获取最新的 folder</span>
                    folder <span class="token operator">=</span> <span class="token function">refreshFolder</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 处理新邮件</span>
                <span class="token comment">// todo</span>
                <span class="token comment">// 异步发送日志</span>
                <span class="token comment">// todo</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 一些异常处理</span>
                <span class="token comment">// 出现无法处理异常时loopLineOnFlag = false;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">IMAPFolder</span> <span class="token function">refreshFolder</span><span class="token punctuation">(</span><span class="token class-name">IMAPStore</span> store<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">{</span>
        <span class="token class-name">IMAPFolder</span> folder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token comment">// 每次重新获取收件箱,避免本地缓存导致获取不到最新邮件</span>
        folder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IMAPFolder</span><span class="token punctuation">)</span> store<span class="token punctuation">.</span><span class="token function">getFolder</span><span class="token punctuation">(</span><span class="token class-name">MailTypeEnum</span><span class="token punctuation">.</span><span class="token constant">MAIL_TYPE_INBOX</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 打开文件夹</span>
        folder<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">Folder</span><span class="token punctuation">.</span><span class="token constant">READ_WRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> folder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MailEvent</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">int</span> mode<span class="token punctuation">,</span> <span class="token class-name">ResyncData</span> rd<span class="token punctuation">)</span>
                <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">{</span>
    <span class="token function">checkClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// insure that we are not already open</span>

    <span class="token class-name">MailboxInfo</span> mi <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// Request store for our own protocol connection.</span>
    protocol <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">IMAPStore</span><span class="token punctuation">)</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MailEvent</span><span class="token punctuation">&gt;</span></span> openEvents <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>messageCacheLock<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Acquire messageCacheLock</span>
<span class="token comment">//省略其他代码</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">IMAPProtocol</span> <span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token class-name">IMAPFolder</span> folder<span class="token punctuation">)</span> 
        <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略无关代码</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>folder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span>folders <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            pool<span class="token punctuation">.</span>folders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          pool<span class="token punctuation">.</span>folders<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在修复过程中，对<code>IMAPFolder</code>对象使用完成进行了释放：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loopLineOn</span><span class="token punctuation">(</span><span class="token class-name">IMAPStore</span> store<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> loopLineOnFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token class-name">IMAPFolder</span> folder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>loopLineOnFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 重新连接</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>store<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    store<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 每次获取最新的 folder</span>
                folder <span class="token operator">=</span> <span class="token function">refreshFolder</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 睡眠一段时间再获取</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token constant">DELAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 获取当前邮箱邮件数量</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>folder<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 每次获取最新的 folder</span>
                    folder <span class="token operator">=</span> <span class="token function">refreshFolder</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 处理新邮件</span>
                <span class="token comment">// todo</span>
                <span class="token comment">// 异步发送日志</span>
                <span class="token comment">// todo</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 一些异常处理</span>
                <span class="token comment">// 出现无法处理异常时loopLineOnFlag = false;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>folder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        folder<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        loopLineOnFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function A(I,E){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,d,r,n("p",null,[s("要分析内存占用过高有很多方式，如果是本地启动的项目JDK自带的可视化软件jvisualvm是个不错的选择，但是在测试环境甚至生产环境就不能使用了。在测试/生产环境分析内存最常用的手段是生成内存快照并导到本地，利用eclipse的"),n("a",k,[s("MAT"),e(a)]),s("(Memory Analyzer)插件分析内存快照。")]),n("p",null,[s("插件独立下载地址"),n("a",m,[s("MAT"),e(a)])]),v,n("ul",null,[b,n("li",null,[n("p",null,[h,s("用来查看进程状态，语法如下"),n("a",f,[s("官方文档"),e(a)]),s(":")])])]),g,_,w,y,M,n("ul",null,[n("li",null,[n("p",null,[s("jmap生成内存快照，语法如下"),n("a",F,[s("官方文档"),e(a)]),s(":")]),j])]),x])}const O=p(i,[["render",A],["__file","oom.html.vue"]]);export{O as default};
