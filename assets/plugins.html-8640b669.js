import{_ as l,L as i,n as c,p as r,Q as n,s,M as a,U as t,a0 as o}from"./framework-76e35361.js";const u={},d=n("h1",{id:"插件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#插件","aria-hidden":"true"},"#"),s(" 插件")],-1),k=n("h2",{id:"容器container",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#容器container","aria-hidden":"true"},"#"),s(" 容器container")],-1),h={href:"https://v2.vuepress.vuejs.org/zh/reference/plugin/container.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"},v=o(`<h3 id="容器语法" tabindex="-1"><a class="header-anchor" href="#容器语法" aria-hidden="true">#</a> 容器语法</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>::: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span> [info]
[content]
:::
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>type</code> 是必需的，应通过 <a href="#type">type</a> 配置项来指定。</li><li><code>info</code> 是可选的，其默认值可以通过 <a href="#locales">locales</a> 的 <code>defaultInfo</code> 配置项来指定，作用是容器的标题。</li><li><code>content</code> 可是任何合法的 Markdown 内容。</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>该插件可以被多次使用，以便支持不同类型的容器。</p></div><h3 id="配置项" tabindex="-1"><a class="header-anchor" href="#配置项" aria-hidden="true">#</a> 配置项</h3><h4 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> type</h4>`,6),g=n("li",null,[s("类型： "),n("code",null,"String")],-1),f=n("li",null,"详情：容器的类型",-1),_=n("li",null,"tip",-1),b=n("li",null,"warning",-1),y=n("li",null,"danger",-1),E=n("li",null,"details",-1),x=n("ul",null,[n("li",null,[n("code",null,"code-group")]),n("li",null,[n("code",null,"code-group-item")])],-1),A={class:"custom-container warning"},w=n("p",{class:"custom-container-title"},"注意",-1),B=n("p",null,"​ 下面的配置项是自定义容器才需要的配置，如果使用过程中不需要自定义容器可以忽略掉。",-1),I=o(`<h4 id="locales" tabindex="-1"><a class="header-anchor" href="#locales" aria-hidden="true">#</a> locales</h4><ul><li><p>类型： <code>Record&lt;string, { defaultInfo: string }&gt;</code></p></li><li><p>详情：</p><p>容器在不同 locales 下的默认 <code>info</code> 。</p><p>如果没有指定该配置项，默认 <code>info</code> 会使用大写的 <a href="#type">type</a> 。</p></li><li><p>示例：</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&#39;@vuepress/container&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;tip&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">locales</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&#39;/&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">defaultInfo</span><span class="token operator">:</span> <span class="token string">&#39;TIP&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token string-property property">&#39;/zh/&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">defaultInfo</span><span class="token operator">:</span> <span class="token string">&#39;提示&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),V=o('<h4 id="before" tabindex="-1"><a class="header-anchor" href="#before" aria-hidden="true">#</a> before</h4><ul><li><p>类型： <code>(info: string) =&gt; string</code></p></li><li><p>默认值：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span>info<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class=&quot;custom-container </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p class=&quot;custom-container-title&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>详情：</p><p>一个用于渲染容器起始标签的函数。</p><p>第一个参数是 <a href="#%E5%AE%B9%E5%99%A8%E8%AF%AD%E6%B3%95">容器语法</a> 的 <code>info</code> 部分。</p></li></ul><h4 id="after" tabindex="-1"><a class="header-anchor" href="#after" aria-hidden="true">#</a> after</h4><ul><li><p>类型： <code>(info: string) =&gt; string</code></p></li><li><p>默认值：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;&lt;/div&gt;\\n&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>详情：</p><p>一个用于渲染容器结束标签的函数。</p><p>第一个参数是 <a href="#%E5%AE%B9%E5%99%A8%E8%AF%AD%E6%B3%95">容器语法</a> 的 <code>info</code> 部分。</p></li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><p>before和after两个配置必须同时配置，after主要负责before中定义标签的关闭</p></div>',9);function q(L,j){const p=i("ExternalLinkIcon"),e=i("RouterLink");return c(),r("div",null,[d,k,n("blockquote",null,[n("p",null,[s("节选自官网文档"),n("a",h,[s("container"),a(p)]),s("，保留了基本使用方法，增加了简易实用的自定义容器；忽略了官网中配置"),n("a",m,[s("markdown-it-container"),a(p)]),s("的配置项，这些配置项更倾向于开发VuePress插件，使用时很少用到。")])]),v,n("ul",null,[g,f,n("li",null,[s("VuePress默认主题中定义的类型有，详细用法见"),a(e,{to:"/md/using/vuepress/default-theme.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%B9%E5%99%A8"},{default:t(()=>[s("默认容器")]),_:1}),s("： "),n("ul",null,[_,b,y,E,n("li",null,[a(e,{to:"/md/using/vuepress/components.html#codegroup"},{default:t(()=>[s("CodeGroup")]),_:1}),s(" 和 "),a(e,{to:"/md/using/vuepress/components.html#codegroupitem"},{default:t(()=>[s("CodeGroupItem")]),_:1}),s(" 的别名： "),x])])])]),n("div",A,[w,B,n("p",null,[s("​ tip、warning、danger的默认显示文本可以在默认主题的配置中简易配置，见"),a(e,{to:"/md/using/vuepress/defalut-theme.html#%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE"},{default:t(()=>[s("默认主题中容器的配置")]),_:1})])]),I,n("ul",null,[n("li",null,[s("参考： "),n("ul",null,[n("li",null,[a(e,{to:"/md/using/vuepress/i18n.html"},{default:t(()=>[s("指南 > 多语言支持")]),_:1})])])])]),V])}const D=l(u,[["render",q],["__file","plugins.html.vue"]]);export{D as default};
