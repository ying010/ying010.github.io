import{_ as t,n as d,p as e,a0 as a}from"./framework-76e35361.js";const r={},h=a('<h1 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h1><p>算法+数据结构=程序</p><h2 id="一、算法分析" tabindex="-1"><a class="header-anchor" href="#一、算法分析" aria-hidden="true">#</a> 一、算法分析</h2><h3 id="_1-1-时间复杂度" tabindex="-1"><a class="header-anchor" href="#_1-1-时间复杂度" aria-hidden="true">#</a> 1.1. 时间复杂度</h3><p>一个程序的时间复杂度是指程序运行从开始到结束所需要的时间。</p><p>计算时间复杂度的时候，主要考虑算法中最高阶项的开销，只要找出算法中最高阶的复杂度，就可以忽略低阶和常数的复杂度。</p><p>常见的时间复杂度: $$ \\bbox[yellow,5px,border:2px solid red]{ O(1) &lt; O(log_2n) &lt; O(n) &lt; O(nlog_2n) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) } $$</p><h3 id="_1-2-空间复杂度" tabindex="-1"><a class="header-anchor" href="#_1-2-空间复杂度" aria-hidden="true">#</a> 1.2. 空间复杂度</h3><p>一个算法的空间复杂度是指程序运行从开始到结束所需的存储空间大小。</p><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>最好时间复杂度</th><th>最坏时间复杂度</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td></td><td></td><td></td><td></td><td>稳定</td></tr><tr><td>快速排序</td><td></td><td></td><td></td><td></td><td>不稳定</td></tr><tr><td>选择排序</td><td></td><td></td><td></td><td></td><td>不稳定</td></tr><tr><td>插入排序</td><td></td><td></td><td></td><td></td><td>稳定</td></tr></tbody></table>',10),n=[h];function o(l,i){return d(),e("div",null,n)}const s=t(r,[["render",o],["__file","algorithm.html.vue"]]);export{s as default};
