import{_ as p,L as l,n as o,p as c,Q as n,s,M as t,a0 as e}from"./framework-76e35361.js";const i={},r=e(`<h1 id="入门" tabindex="-1"><a class="header-anchor" href="#入门" aria-hidden="true">#</a> 入门</h1><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h2><h3 id="_1-启动一个测试服务" tabindex="-1"><a class="header-anchor" href="#_1-启动一个测试服务" aria-hidden="true">#</a> 1. 启动一个测试服务</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-O</span> https://arthas.aliyun.com/math-game.jar
<span class="token function">java</span> <span class="token parameter variable">-jar</span> math-game.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ath-game</code>是一个简单的程序，每隔一秒生成一个随机数，再执行质因数分解，并打印出分解结果。</p><h3 id="_2-启动arthas" tabindex="-1"><a class="header-anchor" href="#_2-启动arthas" aria-hidden="true">#</a> 2. 启动arthas</h3><div class="custom-container warning"><p class="custom-container-title">注意</p><p>使用和目标进程一致的用户启动，否则可能 attach 失败</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-O</span> https://arthas.aliyun.com/arthas-boot.jar
<span class="token function">java</span> <span class="token parameter variable">-jar</span> arthas-boot.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输入指令之后会启动arthas并列出正在执行的Java程序，选择需要查看的进程。如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@iZ ~<span class="token punctuation">]</span><span class="token comment"># java -jar arthas-boot.jar </span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> JAVA_HOME: /opt/jdk1.8.0_341/jre
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> arthas-boot version: <span class="token number">3.6</span>.7
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Found existing <span class="token function">java</span> process, please choose one and input the serial number of the process, eg <span class="token builtin class-name">:</span> <span class="token number">1</span>. Then hit ENTER.
* <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: <span class="token number">8832</span> math-game.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入1并回车，进入arthas面板：</p><p><img src="https://raw.githubusercontent.com/ying010/pic-repo/master/img/2023/02/07/20230207-164339.png" alt="image-20230207164338150"></p><h2 id="常用功能" tabindex="-1"><a class="header-anchor" href="#常用功能" aria-hidden="true">#</a> 常用功能</h2><h3 id="_1-查看进程实时信息" tabindex="-1"><a class="header-anchor" href="#_1-查看进程实时信息" aria-hidden="true">#</a> 1. 查看进程实时信息</h3><p><code>dashboard</code>可以查看当前进程实时信息，滚动展示，按<code>ctrl+c</code>中断执行。</p><p><img src="https://raw.githubusercontent.com/ying010/pic-repo/master/img/2023/02/07/20230207-164848.png" alt="image-20230207164847813"></p><h3 id="_2-获取进程的main入口" tabindex="-1"><a class="header-anchor" href="#_2-获取进程的main入口" aria-hidden="true">#</a> 2. 获取进程的Main入口</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>thread <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&#39;main(&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>thread</code>指令可以打印线程信息，ID=1的线程通常为main方法所在线程。</p><p><img src="https://raw.githubusercontent.com/ying010/pic-repo/master/img/2023/02/07/20230207-165437.png" alt="image-20230207165436483"></p><h3 id="_3-代码反编译" tabindex="-1"><a class="header-anchor" href="#_3-代码反编译" aria-hidden="true">#</a> 3. 代码反编译</h3><p><code>jad</code>指令可以反编译代码。可以查看线上代码是否为预期代码，是否被覆盖或未上线。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>arthas@8832<span class="token punctuation">]</span>$ jad demo.MathGame

ClassLoader:                                                                                                                                                                                                                                                                  
+-sun.misc.Launcher<span class="token variable">$AppClassLoader</span>@70dea4e                                                                                                                                                                                                                                    
  +-sun.misc.Launcher<span class="token variable">$ExtClassLoader</span>@360878cf                                                                                                                                                                                                                                 

Location:                                                                                                                                                                                                                                                                     
/root/math-game.jar                                                                                                                                                                                                                                                           

       /*
        * Decompiled with CFR.
        */
       package demo<span class="token punctuation">;</span>
       
       <span class="token function">import</span> java.util.ArrayList<span class="token punctuation">;</span>
       <span class="token function">import</span> java.util.List<span class="token punctuation">;</span>
       <span class="token function">import</span> java.util.Random<span class="token punctuation">;</span>
       <span class="token function">import</span> java.util.concurrent.TimeUnit<span class="token punctuation">;</span>
       
       public class MathGame <span class="token punctuation">{</span>
           private static Random random <span class="token operator">=</span> new Random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           private int illegalArgumentCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
       
           public List<span class="token operator">&lt;</span>Integer<span class="token operator">&gt;</span> primeFactors<span class="token punctuation">(</span>int number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
/*44*/         <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
/*45*/             ++this.illegalArgumentCount<span class="token punctuation">;</span>
                   throw new IllegalArgumentException<span class="token punctuation">(</span><span class="token string">&quot;number is: &quot;</span> + number + <span class="token string">&quot;, need &gt;= 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
               ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">&gt;</span> result <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
/*50*/         int i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
/*51*/         <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
/*52*/             <span class="token keyword">if</span> <span class="token punctuation">(</span>number % i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
/*53*/                 result.add<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
/*54*/                 number /<span class="token operator">=</span> i<span class="token punctuation">;</span>
/*55*/                 i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                       <span class="token builtin class-name">continue</span><span class="token punctuation">;</span>
                   <span class="token punctuation">}</span>
/*57*/             ++i<span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
/*61*/         <span class="token builtin class-name">return</span> result<span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       
           public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws InterruptedException <span class="token punctuation">{</span>
               MathGame game <span class="token operator">=</span> new MathGame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>
/*16*/             game.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
/*17*/             TimeUnit.<span class="token environment constant">SECONDS</span>.sleep<span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
           <span class="token punctuation">}</span>
       
           public void run<span class="token punctuation">(</span><span class="token punctuation">)</span> throws InterruptedException <span class="token punctuation">{</span>
               try <span class="token punctuation">{</span>
/*23*/             int number <span class="token operator">=</span> random.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span> / <span class="token number">10000</span><span class="token punctuation">;</span>
/*24*/             List<span class="token operator">&lt;</span>Integer<span class="token operator">&gt;</span> primeFactors <span class="token operator">=</span> this.primeFactors<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
/*25*/             MathGame.print<span class="token punctuation">(</span>number, primeFactors<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
               catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
/*28*/             System.out.println<span class="token punctuation">(</span>String.format<span class="token punctuation">(</span><span class="token string">&quot;illegalArgumentCount:%3d, &quot;</span>, this.illegalArgumentCount<span class="token punctuation">)</span> + e.getMessage<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
           <span class="token punctuation">}</span>
       
           public static void print<span class="token punctuation">(</span>int number, List<span class="token operator">&lt;</span>Integer<span class="token operator">&gt;</span> primeFactors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               StringBuffer sb <span class="token operator">=</span> new StringBuffer<span class="token punctuation">(</span>number + <span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
/*34*/         <span class="token keyword">for</span> <span class="token punctuation">(</span>int factor <span class="token builtin class-name">:</span> primeFactors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
/*35*/             sb.append<span class="token punctuation">(</span>factor<span class="token punctuation">)</span>.append<span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
/*37*/         <span class="token keyword">if</span> <span class="token punctuation">(</span>sb.charAt<span class="token punctuation">(</span>sb.length<span class="token punctuation">(</span><span class="token punctuation">)</span> - <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
/*38*/             sb.deleteCharAt<span class="token punctuation">(</span>sb.length<span class="token punctuation">(</span><span class="token punctuation">)</span> - <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
/*40*/         System.out.println<span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>

Affect<span class="token punctuation">(</span>row-cnt:1<span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">1002</span> ms.
<span class="token punctuation">[</span>arthas@8832<span class="token punctuation">]</span>$ 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-监听函数返回值" tabindex="-1"><a class="header-anchor" href="#_4-监听函数返回值" aria-hidden="true">#</a> 4. 监听函数返回值</h3><p><code>watch</code>指令可以监听程序的运行，可以在程序运行期间查看函数的入参、返回值、抛出异常等，再不加日志的情况下就能方便定位问题。以监听函数返回值为例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>arthas@8832<span class="token punctuation">]</span>$ <span class="token function">watch</span> demo.MathGame primeFactors returnObj
Press Q or Ctrl+C to abort.
Affect<span class="token punctuation">(</span>class count: <span class="token number">1</span> , method count: <span class="token number">1</span><span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">157</span> ms, listenerId: <span class="token number">1</span>
<span class="token assign-left variable">method</span><span class="token operator">=</span>demo.MathGame.primeFactors <span class="token assign-left variable">location</span><span class="token operator">=</span>AtExceptionExit
<span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">2023</span>-02-07 <span class="token number">16</span>:59:00<span class="token punctuation">;</span> <span class="token punctuation">[</span>cost<span class="token operator">=</span><span class="token number">1</span>.048227ms<span class="token punctuation">]</span> <span class="token assign-left variable">result</span><span class="token operator">=</span>null
<span class="token assign-left variable">method</span><span class="token operator">=</span>demo.MathGame.primeFactors <span class="token assign-left variable">location</span><span class="token operator">=</span>AtExceptionExit
<span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">2023</span>-02-07 <span class="token number">16</span>:59:01<span class="token punctuation">;</span> <span class="token punctuation">[</span>cost<span class="token operator">=</span><span class="token number">0</span>.048835ms<span class="token punctuation">]</span> <span class="token assign-left variable">result</span><span class="token operator">=</span>null
<span class="token assign-left variable">method</span><span class="token operator">=</span>demo.MathGame.primeFactors <span class="token assign-left variable">location</span><span class="token operator">=</span>AtExit
<span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">2023</span>-02-07 <span class="token number">16</span>:59:02<span class="token punctuation">;</span> <span class="token punctuation">[</span>cost<span class="token operator">=</span><span class="token number">1</span>.144238ms<span class="token punctuation">]</span> <span class="token assign-left variable">result</span><span class="token operator">=</span>@ArrayList<span class="token punctuation">[</span>
    @Integer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>,
    @Integer<span class="token punctuation">[</span><span class="token number">64433</span><span class="token punctuation">]</span>,
<span class="token punctuation">]</span>
<span class="token assign-left variable">method</span><span class="token operator">=</span>demo.MathGame.primeFactors <span class="token assign-left variable">location</span><span class="token operator">=</span>AtExit
<span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">2023</span>-02-07 <span class="token number">16</span>:59:03<span class="token punctuation">;</span> <span class="token punctuation">[</span>cost<span class="token operator">=</span><span class="token number">0</span>.027143ms<span class="token punctuation">]</span> <span class="token assign-left variable">result</span><span class="token operator">=</span>@ArrayList<span class="token punctuation">[</span>
    @Integer<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>,
    @Integer<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span>,
    @Integer<span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span>,
<span class="token punctuation">]</span>
<span class="token assign-left variable">method</span><span class="token operator">=</span>demo.MathGame.primeFactors <span class="token assign-left variable">location</span><span class="token operator">=</span>AtExceptionExit
<span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">2023</span>-02-07 <span class="token number">16</span>:59:04<span class="token punctuation">;</span> <span class="token punctuation">[</span>cost<span class="token operator">=</span><span class="token number">0</span>.053625ms<span class="token punctuation">]</span> <span class="token assign-left variable">result</span><span class="token operator">=</span>null
<span class="token assign-left variable">method</span><span class="token operator">=</span>demo.MathGame.primeFactors <span class="token assign-left variable">location</span><span class="token operator">=</span>AtExceptionExit
<span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">2023</span>-02-07 <span class="token number">16</span>:59:05<span class="token punctuation">;</span> <span class="token punctuation">[</span>cost<span class="token operator">=</span><span class="token number">0</span>.047201ms<span class="token punctuation">]</span> <span class="token assign-left variable">result</span><span class="token operator">=</span>null
<span class="token assign-left variable">method</span><span class="token operator">=</span>demo.MathGame.primeFactors <span class="token assign-left variable">location</span><span class="token operator">=</span>AtExceptionExit
<span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">2023</span>-02-07 <span class="token number">16</span>:59:06<span class="token punctuation">;</span> <span class="token punctuation">[</span>cost<span class="token operator">=</span><span class="token number">0</span>.046098ms<span class="token punctuation">]</span> <span class="token assign-left variable">result</span><span class="token operator">=</span>null
<span class="token punctuation">[</span>arthas@8832<span class="token punctuation">]</span>$ 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-退出-arthas" tabindex="-1"><a class="header-anchor" href="#_5-退出-arthas" aria-hidden="true">#</a> 5. 退出 arthas</h3><p>如果只是退出当前的连接，可以用<code>quit</code>或者<code>exit</code>命令。Attach 到目标进程上的 arthas 还会继续运行，端口会保持开放，下次连接时可以直接连接上。</p><p>如果想完全退出 arthas，可以执行<code>stop</code>命令。</p><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><h3 id="搜索查询命令" tabindex="-1"><a class="header-anchor" href="#搜索查询命令" aria-hidden="true">#</a> 搜索查询命令</h3><p>thread、sc、sm</p><h3 id="观察命令" tabindex="-1"><a class="header-anchor" href="#观察命令" aria-hidden="true">#</a> 观察命令</h3><p>观察命令可以观测到方法执行时的上下文数据、调用路径、执行耗时、统计信息等。是进行BUG调试和性能调试主要命令。观察命令都会用到观察表达式或条件表达式，这些表达式都是主要由<code>ognl</code>表达式组成，可选参数主要是<code>Advice</code>定义。在使用观察命令之前需要熟悉这两者才能更好写出符合诉求的表达式。</p><h4 id="advice" tabindex="-1"><a class="header-anchor" href="#advice" aria-hidden="true">#</a> Advice</h4><p>advice简略代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Advice</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ClassLoader</span> loader<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ArthasMethod</span> method<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> returnObj<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Throwable</span> throwExp<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> isBefore<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> isThrow<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> isReturn<span class="token punctuation">;</span>

    <span class="token comment">// getter/setter</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里列一个表格来说明不同变量的含义</p><table><thead><tr><th style="text-align:right;">变量名</th><th style="text-align:left;">变量解释</th></tr></thead><tbody><tr><td style="text-align:right;">loader</td><td style="text-align:left;">本次调用类所在的 ClassLoader</td></tr><tr><td style="text-align:right;">clazz</td><td style="text-align:left;">本次调用类的 Class 引用</td></tr><tr><td style="text-align:right;">method</td><td style="text-align:left;">本次调用方法反射引用</td></tr><tr><td style="text-align:right;">target</td><td style="text-align:left;">本次调用类的实例</td></tr><tr><td style="text-align:right;">params</td><td style="text-align:left;">本次调用参数列表，这是一个数组，如果方法是无参方法则为空数组</td></tr><tr><td style="text-align:right;">returnObj</td><td style="text-align:left;">本次调用返回的对象。当且仅当 <code>isReturn==true</code> 成立时候有效，表明方法调用是以正常返回的方式结束。如果当前方法无返回值 <code>void</code>，则值为 null</td></tr><tr><td style="text-align:right;">throwExp</td><td style="text-align:left;">本次调用抛出的异常。当且仅当 <code>isThrow==true</code> 成立时有效，表明方法调用是以抛出异常的方式结束。</td></tr><tr><td style="text-align:right;">isBefore</td><td style="text-align:left;">辅助判断标记，当前的通知节点有可能是在方法一开始就通知，此时 <code>isBefore==true</code> 成立，同时 <code>isThrow==false</code> 和 <code>isReturn==false</code>，因为在方法刚开始时，还无法确定方法调用将会如何结束。</td></tr><tr><td style="text-align:right;">isThrow</td><td style="text-align:left;">辅助判断标记，当前的方法调用以抛异常的形式结束。</td></tr><tr><td style="text-align:right;">isReturn</td><td style="text-align:left;">辅助判断标记，当前的方法调用以正常返回的形式结束。</td></tr></tbody></table><p>所有变量都可以在表达式中直接使用，如果在表达式中编写了不符合 OGNL 脚本语法或者引入了不在表格中的变量，则退出命令的执行；用户可以根据当前的异常信息修正<code>条件表达式</code>或<code>观察表达式</code></p><h4 id="ognl表达式" tabindex="-1"><a class="header-anchor" href="#ognl表达式" aria-hidden="true">#</a> OGNL表达式</h4>`,41),u={href:"https://github.com/alibaba/arthas/issues/71",target:"_blank",rel:"noopener noreferrer"},d={href:"https://commons.apache.org/proper/commons-ognl/language-guide.html",target:"_blank",rel:"noopener noreferrer"},k=e(`<h4 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> watch</h4><p>能方便的观察到指定函数的调用情况。能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写 OGNL 表达式进行对应变量的查看。</p><p>如果已知是某个方法执行报错或结果未达预期但又没写日志时，这时可以使用这个命令观察改方法的多次调用，对比入参、返回参数、异常等可以在不另加日志的情况下定位到问题。</p><h5 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明</h5><p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象</p><table><thead><tr><th style="text-align:right;">参数名称</th><th style="text-align:left;">参数说明</th></tr></thead><tbody><tr><td style="text-align:right;"><em>class-pattern</em></td><td style="text-align:left;">类名表达式匹配</td></tr><tr><td style="text-align:right;"><em>method-pattern</em></td><td style="text-align:left;">函数名表达式匹配</td></tr><tr><td style="text-align:right;"><em>express</em></td><td style="text-align:left;">观察表达式，默认值：<code>{params, target, returnObj}</code></td></tr><tr><td style="text-align:right;"><em>condition-express</em></td><td style="text-align:left;">条件表达式</td></tr><tr><td style="text-align:right;">[b]</td><td style="text-align:left;">在<strong>函数调用之前</strong>观察</td></tr><tr><td style="text-align:right;">[e]</td><td style="text-align:left;">在<strong>函数异常之后</strong>观察</td></tr><tr><td style="text-align:right;">[s]</td><td style="text-align:left;">在<strong>函数返回之后</strong>观察</td></tr><tr><td style="text-align:right;">[f]</td><td style="text-align:left;">在<strong>函数结束之后</strong>(正常返回和异常返回)观察</td></tr><tr><td style="text-align:right;">[E]</td><td style="text-align:left;">开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td style="text-align:right;">[x:]</td><td style="text-align:left;">指定输出结果的属性遍历深度，默认为 1，最大值是 4</td></tr><tr><td style="text-align:right;">[n:]</td><td style="text-align:left;">指定观察的次数，默认持续观察；-n 2 表示观察到两次调用后退出</td></tr></tbody></table><h5 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h5><p>案例对应的源码是原理解析中的代码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>arthas@11656<span class="token punctuation">]</span>$ <span class="token function">watch</span> org.example.TestDemo hello
Press Q or Ctrl+C to abort.
Affect<span class="token punctuation">(</span>class count: <span class="token number">1</span> , method count: <span class="token number">1</span><span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">62</span> ms, listenerId: <span class="token number">1</span>
<span class="token assign-left variable">method</span><span class="token operator">=</span>org.example.TestDemo.hello <span class="token assign-left variable">location</span><span class="token operator">=</span>AtExit
<span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">2023</span>-02-15 <span class="token number">17</span>:20:44<span class="token punctuation">;</span> <span class="token punctuation">[</span>cost<span class="token operator">=</span><span class="token number">5</span>.5832ms<span class="token punctuation">]</span> <span class="token assign-left variable">result</span><span class="token operator">=</span>@ArrayList<span class="token punctuation">[</span>
    @Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>isEmpty<span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>,
    @TestDemo<span class="token punctuation">[</span>org.example.TestDemo@cc34f4d<span class="token punctuation">]</span>,
    null,
<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><ul><li><p>返回数据分别为<code>method</code>,<code>locathon</code>,<code>ts</code>,<code>cost</code>,<code>result</code>;</p><ul><li><p>其中<code>location</code>有三个值，<code>AtEnter</code>，<code>AtExit</code>，<code>AtExceptionExit</code>。对应函数入口，函数正常 return，函数抛出异常</p></li><li><p><code>ts</code>表示执行时时间戳</p></li><li><p><code>cost</code>表示执行耗时，同时<code>cost</code>也可以应用到条件表达式中，用于筛选执行耗时大于某个值的执行</p></li><li><p><code>result</code>是观察结果，里面的值与观察表达式有关</p></li></ul></li><li><p>案例中没有使用观察表达式，默认为<code>{params, target, returnObj}</code>，所以结果中的<code>result</code>一共三个值，分别对应入参、对象实例、返回值。</p></li></ul><h4 id="tt" tabindex="-1"><a class="header-anchor" href="#tt" aria-hidden="true">#</a> tt</h4><p><code>watch</code> 虽然很方便和灵活，但需要提前想清楚观察表达式的拼写，这对排查问题而言要求太高，因为很多时候我们并不清楚问题出自于何方，只能靠蛛丝马迹进行猜测。</p><p>这个时候如果能记录下当时方法调用的所有入参和返回值、抛出的异常会对整个问题的思考与判断非常有帮助。</p><p>于是乎，TimeTunnel 命令就诞生了。</p><p><code>tt</code>可以记录多次方法调用的现场，并检索、查看这些现场数据。甚至可以在修改完成后，使用某一个现场再次调用方法。</p><h5 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h5><table><thead><tr><th style="text-align:right;">参数名称</th><th style="text-align:left;">参数说明</th></tr></thead><tbody><tr><td style="text-align:right;"><em>class-pattern</em></td><td style="text-align:left;">类名表达式匹配</td></tr><tr><td style="text-align:right;"><em>method-pattern</em></td><td style="text-align:left;">函数名表达式匹配</td></tr><tr><td style="text-align:right;"><em>condition-express</em></td><td style="text-align:left;">条件表达式</td></tr><tr><td style="text-align:right;">[t]</td><td style="text-align:left;">记录方法执行情况</td></tr><tr><td style="text-align:right;">[E]</td><td style="text-align:left;">开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td style="text-align:right;">[n:]</td><td style="text-align:left;">设置执行次数，默认无限执行。尽量设置这个字段，不然可能导致内存被撑爆</td></tr><tr><td style="text-align:right;">[x:]</td><td style="text-align:left;">设置结果中字段的遍历深度，默认1</td></tr><tr><td style="text-align:right;">[l]</td><td style="text-align:left;">展示已记录的列表</td></tr><tr><td style="text-align:right;">[s]</td><td style="text-align:left;">检索记录。条件表达式可配置OGNL表达式，支持Advice</td></tr><tr><td style="text-align:right;">[i]</td><td style="text-align:left;">显示某一个片段的详细信息</td></tr><tr><td style="text-align:right;">[w]</td><td style="text-align:left;">观察记录中某些数据。观察表达式可配置OGNL表达式，支持Advice</td></tr><tr><td style="text-align:right;">[p]</td><td style="text-align:left;">重新执行</td></tr><tr><td style="text-align:right;">--replay-interval</td><td style="text-align:left;">重复执行的时间间隔</td></tr><tr><td style="text-align:right;">--replay-times</td><td style="text-align:left;">重复执行的执行次数</td></tr></tbody></table><h5 id="案例-1" tabindex="-1"><a class="header-anchor" href="#案例-1" aria-hidden="true">#</a> 案例</h5><h5 id="返回字段说明" tabindex="-1"><a class="header-anchor" href="#返回字段说明" aria-hidden="true">#</a> 返回字段说明</h5><table><thead><tr><th>表格字段</th><th>字段解释</th></tr></thead><tbody><tr><td>INDEX</td><td>时间片段记录编号，每一个编号代表着一次调用，后续 tt 还有很多命令都是基于此编号指定记录操作，非常重要。</td></tr><tr><td>TIMESTAMP</td><td>方法执行的本机时间，记录了这个时间片段所发生的本机时间</td></tr><tr><td>COST(ms)</td><td>方法执行的耗时</td></tr><tr><td>IS-RET</td><td>方法是否以正常返回的形式结束</td></tr><tr><td>IS-EXP</td><td>方法是否以抛异常的形式结束</td></tr><tr><td>OBJECT</td><td>执行对象的<code>hashCode()</code>，注意，曾经有人误认为是对象在 JVM 中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体</td></tr><tr><td>CLASS</td><td>执行的类名</td></tr><tr><td>METHOD</td><td>执行的方法名</td></tr></tbody></table><h5 id="案例-2" tabindex="-1"><a class="header-anchor" href="#案例-2" aria-hidden="true">#</a> 案例</h5><ul><li><p>记录调用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>arthas@5268<span class="token punctuation">]</span>$ tt <span class="token parameter variable">-t</span> org.example.TestDemo hello <span class="token parameter variable">-n</span> <span class="token number">5</span>
Press Q or Ctrl+C to abort.
Affect<span class="token punctuation">(</span>class count: <span class="token number">1</span> , method count: <span class="token number">1</span><span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">15</span> ms, listenerId: <span class="token number">2</span>
 INDEX         TIMESTAMP                           COST<span class="token punctuation">(</span>ms<span class="token punctuation">)</span>          IS-RET        IS-EXP         OBJECT                     CLASS                                                METHOD                                               
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 <span class="token number">1001</span>          <span class="token number">2023</span>-02-15 <span class="token number">20</span>:18:25                 <span class="token number">8033.6007</span>         <span class="token boolean">true</span>          <span class="token boolean">false</span>          0x6e0be858                 TestDemo                                             hello                                                
 <span class="token number">1002</span>          <span class="token number">2023</span>-02-15 <span class="token number">20</span>:18:33                 <span class="token number">8034.7658</span>         <span class="token boolean">true</span>          <span class="token boolean">false</span>          0x6e0be858                 TestDemo                                             hello                                                
 <span class="token number">1003</span>          <span class="token number">2023</span>-02-15 <span class="token number">20</span>:18:41                 <span class="token number">8042.3515</span>         <span class="token boolean">true</span>          <span class="token boolean">false</span>          0x6e0be858                 TestDemo                                             hello                                                
 <span class="token number">1004</span>          <span class="token number">2023</span>-02-15 <span class="token number">20</span>:18:49                 <span class="token number">8041.9081</span>         <span class="token boolean">true</span>          <span class="token boolean">false</span>          0x6e0be858                 TestDemo                                             hello                                                
 <span class="token number">1005</span>          <span class="token number">2023</span>-02-15 <span class="token number">20</span>:18:57                 <span class="token number">8042.4607</span>         <span class="token boolean">true</span>          <span class="token boolean">false</span>          0x6e0be858                 TestDemo                                             hello                                                
Command execution <span class="token builtin class-name">times</span> exceed limit: <span class="token number">5</span>, so <span class="token builtin class-name">command</span> will exit. You can <span class="token builtin class-name">set</span> it with <span class="token parameter variable">-n</span> option.

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="monitor" tabindex="-1"><a class="header-anchor" href="#monitor" aria-hidden="true">#</a> monitor</h4><p>方法监控，用来统计方法执行情况。</p><h5 id="参数说明-1" tabindex="-1"><a class="header-anchor" href="#参数说明-1" aria-hidden="true">#</a> 参数说明</h5><p>方法拥有一个命名参数 <code>[c:]</code>，意思是统计周期（cycle of output），拥有一个整型的参数值</p><table><thead><tr><th style="text-align:right;">参数名称</th><th style="text-align:left;">参数说明</th></tr></thead><tbody><tr><td style="text-align:right;"><em>class-pattern</em></td><td style="text-align:left;">类名表达式匹配</td></tr><tr><td style="text-align:right;"><em>method-pattern</em></td><td style="text-align:left;">方法名表达式匹配</td></tr><tr><td style="text-align:right;"><em>condition-express</em></td><td style="text-align:left;">条件表达式</td></tr><tr><td style="text-align:right;">[E]</td><td style="text-align:left;">开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td style="text-align:right;"><code>[c:]</code></td><td style="text-align:left;">统计周期，默认值为 120 秒</td></tr><tr><td style="text-align:right;">[b]</td><td style="text-align:left;">在<strong>方法调用之前</strong>计算 condition-express</td></tr><tr><td style="text-align:right;">[n:]</td><td style="text-align:left;">统计次数</td></tr></tbody></table><h5 id="监控的维度说明" tabindex="-1"><a class="header-anchor" href="#监控的维度说明" aria-hidden="true">#</a> 监控的维度说明</h5><table><thead><tr><th style="text-align:right;">监控项</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:right;">timestamp</td><td style="text-align:left;">时间戳</td></tr><tr><td style="text-align:right;">class</td><td style="text-align:left;">Java 类</td></tr><tr><td style="text-align:right;">method</td><td style="text-align:left;">方法（构造方法、普通方法）</td></tr><tr><td style="text-align:right;">total</td><td style="text-align:left;">调用次数</td></tr><tr><td style="text-align:right;">success</td><td style="text-align:left;">成功次数</td></tr><tr><td style="text-align:right;">fail</td><td style="text-align:left;">失败次数</td></tr><tr><td style="text-align:right;">rt</td><td style="text-align:left;">平均 RT</td></tr><tr><td style="text-align:right;">fail-rate</td><td style="text-align:left;">失败率</td></tr></tbody></table><h5 id="案例-3" tabindex="-1"><a class="header-anchor" href="#案例-3" aria-hidden="true">#</a> 案例</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>arthas@18660<span class="token punctuation">]</span>$ monitor <span class="token parameter variable">-c</span> <span class="token number">5</span> <span class="token parameter variable">-n</span> <span class="token number">2</span> org.example.TestDemo hello <span class="token string">&quot;returnObj &gt; 5&quot;</span>
Press Q or Ctrl+C to abort.
Affect<span class="token punctuation">(</span>class count: <span class="token number">1</span> , method count: <span class="token number">1</span><span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">15</span> ms, listenerId: <span class="token number">2</span>
 timestamp                           class                                                method                                               total             success           fail             avg-rt<span class="token punctuation">(</span>ms<span class="token punctuation">)</span>        fail-rate        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 <span class="token number">2023</span>-02-15 <span class="token number">18</span>:10:03                 org.example.TestDemo                                 hello                                                <span class="token number">2</span>                 <span class="token number">2</span>                 <span class="token number">0</span>                <span class="token number">2.47</span>              <span class="token number">0.00</span>%            

 timestamp                           class                                                method                                               total             success           fail             avg-rt<span class="token punctuation">(</span>ms<span class="token punctuation">)</span>        fail-rate        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 <span class="token number">2023</span>-02-15 <span class="token number">18</span>:10:07                 org.example.TestDemo                                 hello                                                <span class="token number">2</span>                 <span class="token number">2</span>                 <span class="token number">0</span>                <span class="token number">2.08</span>              <span class="token number">0.00</span>%            

Command execution <span class="token builtin class-name">times</span> exceed limit: <span class="token number">2</span>, so <span class="token builtin class-name">command</span> will exit. You can <span class="token builtin class-name">set</span> it with <span class="token parameter variable">-n</span> option.

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> stack</h4><div class="custom-container tip"><p class="custom-container-title">提示</p><p>输出当前方法被调用的调用路径</p></div><p>如果已知出现问题的方法，但是不知道具体是哪调用了这个方法时，使用改命令可以方便定位。例如有多个Controller调用了相同的业务方法，当底层方法结果或参数未达预期时想要回溯调用接口就可以使用这个命令。</p><h5 id="参数说明-2" tabindex="-1"><a class="header-anchor" href="#参数说明-2" aria-hidden="true">#</a> 参数说明</h5><table><thead><tr><th style="text-align:right;">参数名称</th><th style="text-align:left;">参数说明</th></tr></thead><tbody><tr><td style="text-align:right;"><em>class-pattern</em></td><td style="text-align:left;">类名表达式匹配</td></tr><tr><td style="text-align:right;"><em>method-pattern</em></td><td style="text-align:left;">方法名表达式匹配</td></tr><tr><td style="text-align:right;"><em>condition-express</em></td><td style="text-align:left;">条件表达式</td></tr><tr><td style="text-align:right;">[E]</td><td style="text-align:left;">开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td style="text-align:right;"><code>[n:]</code></td><td style="text-align:left;">执行次数限制</td></tr></tbody></table><h5 id="案例-4" tabindex="-1"><a class="header-anchor" href="#案例-4" aria-hidden="true">#</a> 案例</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>arthas@18660<span class="token punctuation">]</span>$ stack org.example.TestDemo sm
Press Q or Ctrl+C to abort.
Affect<span class="token punctuation">(</span>class count: <span class="token number">1</span> , method count: <span class="token number">1</span><span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">12</span> ms, listenerId: <span class="token number">3</span>
<span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">2023</span>-02-15 <span class="token number">18</span>:15:25<span class="token punctuation">;</span><span class="token assign-left variable">thread_name</span><span class="token operator">=</span>main<span class="token punctuation">;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">is_daemon</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token assign-left variable">TCCL</span><span class="token operator">=</span>sun.misc.Launcher<span class="token variable">$AppClassLoader</span>@5c647e05
    @org.example.TestDemo.sm<span class="token punctuation">(</span><span class="token punctuation">)</span>
        at org.example.TestDemo.hello<span class="token punctuation">(</span>TestDemo.java:25<span class="token punctuation">)</span>
        at org.example.TestDemo.main<span class="token punctuation">(</span>TestDemo.java:16<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="trace" tabindex="-1"><a class="header-anchor" href="#trace" aria-hidden="true">#</a> trace</h4><p>:::提示</p><p>stack是向上查询调用链路，用来找到谁调用了当前方法。trace是向内查询调用链路，统计方法内部各个调用耗时情况。</p><p>:::</p><p>方法内部调用路径，并输出方法路径上的每个节点上耗时,渲染和统计整个调用链路上的所有性能开销和追踪调用链路。</p><p>用这个命令可以统计出方法各个调用的耗时是性能优化的主要命令。</p><h5 id="参数说明-3" tabindex="-1"><a class="header-anchor" href="#参数说明-3" aria-hidden="true">#</a> 参数说明</h5><table><thead><tr><th style="text-align:right;">参数名称</th><th style="text-align:left;">参数说明</th></tr></thead><tbody><tr><td style="text-align:right;"><em>class-pattern</em></td><td style="text-align:left;">类名表达式匹配</td></tr><tr><td style="text-align:right;"><em>method-pattern</em></td><td style="text-align:left;">方法名表达式匹配</td></tr><tr><td style="text-align:right;"><em>condition-express</em></td><td style="text-align:left;">条件表达式</td></tr><tr><td style="text-align:right;">[skipJDKMethod]</td><td style="text-align:left;">跳过JDK的函数调用，默认为true；如果需要查看jdk的函数需要设置为false;例：--skipJDKMethod false</td></tr><tr><td style="text-align:right;">[exclude-class-pattern]</td><td style="text-align:left;">排除掉指定的类；例：--exclude-class-pattern com.demo.TestFilter</td></tr><tr><td style="text-align:right;">[E]</td><td style="text-align:left;">开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td style="text-align:right;"><code>[n:]</code></td><td style="text-align:left;">命令执行次数</td></tr><tr><td style="text-align:right;"><code>#cost</code></td><td style="text-align:left;">方法执行耗时</td></tr></tbody></table><p>:::注意</p>`,48),m=n("p",null,[n("code",null,"trace"),s(" 能方便的帮助你定位和发现因 RT 高而导致的性能问题缺陷，但其每次只能跟踪一级方法的调用链路。")],-1),b={href:"https://github.com/alibaba/arthas/issues/597",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[n("p",null,"3.3.0 版本后，可以使用动态 Trace 功能，不断增加新的匹配类，参考下面的示例。")],-1),h=n("code",null,"trace java.lang.Thread getName",-1),g={href:"https://github.com/alibaba/arthas/issues/1610",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>:::</p><h5 id="动态-trace" tabindex="-1"><a class="header-anchor" href="#动态-trace" aria-hidden="true">#</a> 动态 trace</h5><p>由于trace每次只能跟踪一级方法的调用链路查询想要查询多层调用性能耗时时会比较麻烦。</p><p>可以用正则表匹配路径上的多个类和函数，一定程度上达到多层 trace 的效果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>trace <span class="token parameter variable">-E</span> com.test.ClassA<span class="token operator">|</span>org.test.ClassB method1<span class="token operator">|</span>method2<span class="token operator">|</span>method3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestDemo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            demo<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            demo<span class="token punctuation">.</span><span class="token function">pm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This is a static method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token function">pm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token function">sm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This is a private method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时想查看<code>hello</code>方法的执行耗时，同时查看<code>hello</code>方法中耗时较高的<code>pm</code>使用如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>arthas@13572<span class="token punctuation">]</span>$ trace <span class="token parameter variable">-E</span> org.example.TestDemo hello<span class="token operator">|</span>pm
Press Q or Ctrl+C to abort.
Affect<span class="token punctuation">(</span>class count: <span class="token number">1</span> , method count: <span class="token number">2</span><span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">25</span> ms, listenerId: <span class="token number">3</span>
<span class="token variable"><span class="token variable">\`</span>---ts<span class="token operator">=</span><span class="token number">2023</span>-02-15 <span class="token number">18</span>:59:47<span class="token punctuation">;</span><span class="token assign-left variable">thread_name</span><span class="token operator">=</span>main<span class="token punctuation">;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">is_daemon</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token assign-left variable">TCCL</span><span class="token operator">=</span>sun.misc.Launcher$AppClassLoader@5c647e05
    <span class="token variable">\`</span></span>---<span class="token punctuation">[</span><span class="token number">3019</span>.237199ms<span class="token punctuation">]</span> org.example.TestDemo:hello<span class="token punctuation">(</span><span class="token punctuation">)</span>
        +---<span class="token punctuation">[</span><span class="token number">99.95</span>% <span class="token number">3017</span>.714901ms <span class="token punctuation">]</span> org.example.TestDemo:pm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#26</span>
        <span class="token operator">|</span>   <span class="token variable"><span class="token variable">\`</span>---<span class="token punctuation">[</span><span class="token number">100.00</span>% <span class="token number">3017</span>.6441ms <span class="token punctuation">]</span> org.example.TestDemo:pm<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">|</span>       <span class="token variable">\`</span></span>---<span class="token punctuation">[</span><span class="token number">33.46</span>% <span class="token number">1009</span>.8259ms <span class="token punctuation">]</span> org.example.TestDemo:sm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#34</span>
        +---<span class="token punctuation">[</span><span class="token number">0.00</span>% <span class="token number">0</span>.0281ms <span class="token punctuation">]</span> org.example.AA:<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#27</span>
        <span class="token variable"><span class="token variable">\`</span>---<span class="token punctuation">[</span><span class="token number">0.02</span>% <span class="token number">0</span>.6087ms <span class="token punctuation">]</span> org.example.A:print<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#28</span>

<span class="token variable">\`</span></span>---ts<span class="token operator">=</span><span class="token number">2023</span>-02-15 <span class="token number">18</span>:59:50<span class="token punctuation">;</span><span class="token assign-left variable">thread_name</span><span class="token operator">=</span>main<span class="token punctuation">;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">is_daemon</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token assign-left variable">TCCL</span><span class="token operator">=</span>sun.misc.Launcher<span class="token variable">$AppClassLoader</span>@5c647e05
    <span class="token variable"><span class="token variable">\`</span>---<span class="token punctuation">[</span><span class="token number">3011</span>.555801ms<span class="token punctuation">]</span> org.example.TestDemo:pm<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token variable">\`</span></span>---<span class="token punctuation">[</span><span class="token number">33.40</span>% <span class="token number">1005</span>.8904ms <span class="token punctuation">]</span> org.example.TestDemo:sm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#34</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种方式是使用动态trace。</p><ul><li><p>打开终端1，记录trace的<code>listenerId</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>arthas@3624<span class="token punctuation">]</span>$ trace org.example.TestDemo hello
Press Q or Ctrl+C to abort.
Affect<span class="token punctuation">(</span>class count: <span class="token number">1</span> , method count: <span class="token number">1</span><span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">65</span> ms, listenerId: <span class="token number">1</span>
<span class="token variable"><span class="token variable">\`</span>---ts<span class="token operator">=</span><span class="token number">2023</span>-02-15 <span class="token number">19</span>:36:39<span class="token punctuation">;</span><span class="token assign-left variable">thread_name</span><span class="token operator">=</span>main<span class="token punctuation">;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">is_daemon</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token assign-left variable">TCCL</span><span class="token operator">=</span>sun.misc.Launcher$AppClassLoader@5c647e05
    <span class="token variable">\`</span></span>---<span class="token punctuation">[</span><span class="token number">3025</span>.1788ms<span class="token punctuation">]</span> org.example.TestDemo:hello<span class="token punctuation">(</span><span class="token punctuation">)</span>
        +---<span class="token punctuation">[</span><span class="token number">99.91</span>% <span class="token number">3022</span>.4952ms <span class="token punctuation">]</span> org.example.TestDemo:pm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#26</span>
        +---<span class="token punctuation">[</span><span class="token number">0.00</span>% <span class="token number">0</span>.0529ms <span class="token punctuation">]</span> org.example.AA:<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#27</span>
        \`---<span class="token punctuation">[</span><span class="token number">0.02</span>% <span class="token number">0</span>.6687ms <span class="token punctuation">]</span> org.example.A:print<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#28</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打开终端2，使用<code>telnet localhost 3658</code>命令连接到终端1，再trace <code>hello</code>中的<code>pm</code>方法，并指定<code>listenerId</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>arthas@3624<span class="token punctuation">]</span>$ trace org.example.TestDemo pm <span class="token parameter variable">--listenerId</span> <span class="token number">1</span>
Press Q or Ctrl+C to abort.
Affect<span class="token punctuation">(</span>class count: <span class="token number">1</span> , method count: <span class="token number">1</span><span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">21</span> ms, listenerId: <span class="token number">1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到终端2中并没有打印pm的执行耗时，但是返回终端1会发现打印出了pm。</p><p>终端1的显示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>arthas@19524<span class="token punctuation">]</span>$ trace org.example.TestDemo hello
Press Q or Ctrl+C to abort.
Affect<span class="token punctuation">(</span>class count: <span class="token number">1</span> , method count: <span class="token number">1</span><span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">114</span> ms, listenerId: <span class="token number">1</span>
<span class="token variable"><span class="token variable">\`</span>---ts<span class="token operator">=</span><span class="token number">2023</span>-02-15 <span class="token number">19</span>:44:43<span class="token punctuation">;</span><span class="token assign-left variable">thread_name</span><span class="token operator">=</span>main<span class="token punctuation">;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">is_daemon</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token assign-left variable">TCCL</span><span class="token operator">=</span>sun.misc.Launcher$AppClassLoader@5c647e05
    <span class="token variable">\`</span></span>---<span class="token punctuation">[</span><span class="token number">3019</span>.9829ms<span class="token punctuation">]</span> org.example.TestDemo:hello<span class="token punctuation">(</span><span class="token punctuation">)</span>
        +---<span class="token punctuation">[</span><span class="token number">99.92</span>% <span class="token number">3017</span>.4576ms <span class="token punctuation">]</span> org.example.TestDemo:pm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#25</span>
        +---<span class="token punctuation">[</span><span class="token number">0.00</span>% <span class="token number">0</span>.0508ms <span class="token punctuation">]</span> org.example.AA:<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#26</span>
        <span class="token variable"><span class="token variable">\`</span>---<span class="token punctuation">[</span><span class="token number">0.01</span>% <span class="token number">0</span>.4179ms <span class="token punctuation">]</span> org.example.A:print<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#27</span>

<span class="token variable">\`</span></span>---ts<span class="token operator">=</span><span class="token number">2023</span>-02-15 <span class="token number">19</span>:44:49<span class="token punctuation">;</span><span class="token assign-left variable">thread_name</span><span class="token operator">=</span>main<span class="token punctuation">;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">is_daemon</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token assign-left variable">TCCL</span><span class="token operator">=</span>sun.misc.Launcher<span class="token variable">$AppClassLoader</span>@5c647e05
    <span class="token variable"><span class="token variable">\`</span>---<span class="token punctuation">[</span><span class="token number">3016</span>.2584ms<span class="token punctuation">]</span> org.example.TestDemo:hello<span class="token punctuation">(</span><span class="token punctuation">)</span>
        +---<span class="token punctuation">[</span><span class="token number">99.98</span>% <span class="token number">3015</span>.6342ms <span class="token punctuation">]</span> org.example.TestDemo:pm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#25</span>
        +---<span class="token punctuation">[</span><span class="token number">0.00</span>% <span class="token number">0</span>.0079ms <span class="token punctuation">]</span> org.example.AA:<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#26</span>
        <span class="token variable">\`</span></span>---<span class="token punctuation">[</span><span class="token number">0.01</span>% <span class="token number">0</span>.2603ms <span class="token punctuation">]</span> org.example.A:print<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#27</span>

<span class="token variable"><span class="token variable">\`</span>---ts<span class="token operator">=</span><span class="token number">2023</span>-02-15 <span class="token number">19</span>:44:52<span class="token punctuation">;</span><span class="token assign-left variable">thread_name</span><span class="token operator">=</span>main<span class="token punctuation">;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">is_daemon</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token assign-left variable">TCCL</span><span class="token operator">=</span>sun.misc.Launcher$AppClassLoader@5c647e05
    <span class="token variable">\`</span></span>---<span class="token punctuation">[</span><span class="token number">3028</span>.4957ms<span class="token punctuation">]</span> org.example.TestDemo:pm<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token variable"><span class="token variable">\`</span>---<span class="token punctuation">[</span><span class="token number">33.47</span>% <span class="token number">1013</span>.6624ms <span class="token punctuation">]</span> org.example.TestDemo:sm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#33</span>

<span class="token variable">\`</span></span>---ts<span class="token operator">=</span><span class="token number">2023</span>-02-15 <span class="token number">19</span>:44:55<span class="token punctuation">;</span><span class="token assign-left variable">thread_name</span><span class="token operator">=</span>main<span class="token punctuation">;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">is_daemon</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token assign-left variable">TCCL</span><span class="token operator">=</span>sun.misc.Launcher<span class="token variable">$AppClassLoader</span>@5c647e05
    <span class="token variable"><span class="token variable">\`</span>---<span class="token punctuation">[</span><span class="token number">3024</span>.3044ms<span class="token punctuation">]</span> org.example.TestDemo:hello<span class="token punctuation">(</span><span class="token punctuation">)</span>
        +---<span class="token punctuation">[</span><span class="token number">99.95</span>% <span class="token number">3022</span>.7ms <span class="token punctuation">]</span> org.example.TestDemo:pm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#25</span>
        <span class="token operator">|</span>   <span class="token variable">\`</span></span>---<span class="token punctuation">[</span><span class="token number">100.00</span>% <span class="token number">3022</span>.6211ms <span class="token punctuation">]</span> org.example.TestDemo:pm<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">|</span>       <span class="token variable"><span class="token variable">\`</span>---<span class="token punctuation">[</span><span class="token number">33.53</span>% <span class="token number">1013</span>.544ms <span class="token punctuation">]</span> org.example.TestDemo:sm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#33</span>
        +---<span class="token punctuation">[</span><span class="token number">0.00</span>% <span class="token number">0</span>.0423ms <span class="token punctuation">]</span> org.example.AA:<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#26</span>
        <span class="token variable">\`</span></span>---<span class="token punctuation">[</span><span class="token number">0.02</span>% <span class="token number">0</span>.6621ms <span class="token punctuation">]</span> org.example.A:print<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#27</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种方式都可以实现多层观测，如果正则表达式掌握熟练可以直接使用第一种方式直接开启所有想观测的方法。如果是刚开始并不确定需要观测哪些方法，可以使用第二种方式先观测第一层然后逐次增加，注意使用第二种方式增加时也可以使用正则表达式一次加多个。</p></li></ul>`,11);function x(y,w){const a=l("ExternalLinkIcon");return o(),c("div",null,[r,n("ul",null,[n("li",null,[s("特殊用法请参考："),n("a",u,[s("issues"),t(a)])]),n("li",null,[s("OGNL 表达式官网："),n("a",d,[s("官网"),t(a)])])]),k,n("ul",null,[n("li",null,[m,n("p",null,[s("参考："),n("a",b,[s("Trace 命令的实现原理"),t(a)])])]),v,n("li",null,[n("p",null,[s("目前不支持 "),h,s("，参考 issue: "),n("a",g,[s("#1610"),t(a)])])])]),f])}const A=p(i,[["render",x],["__file","入门.html.vue"]]);export{A as default};
