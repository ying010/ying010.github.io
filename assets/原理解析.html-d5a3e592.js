import{_ as n,n as s,p as a,a0 as p}from"./framework-76e35361.js";const t={},e=p(`<h1 id="原理解析" tabindex="-1"><a class="header-anchor" href="#原理解析" aria-hidden="true">#</a> 原理解析</h1><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h2><h3 id="trace" tabindex="-1"><a class="header-anchor" href="#trace" aria-hidden="true">#</a> Trace</h3><p>trace命令可以对方法这个调用流程统计。</p><p>给定一个简单的<code>Demo</code>类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestDemo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            demo<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This is a static method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用arthas查看<code>hello</code>方法的调用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>arthas@15736<span class="token punctuation">]</span>$ trace <span class="token parameter variable">--skipJDKMethod</span> <span class="token boolean">false</span> org.example.TestDemo hello
Press Q or Ctrl+C to abort.
Affect<span class="token punctuation">(</span>class count: <span class="token number">1</span> , method count: <span class="token number">1</span><span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">32</span> ms, listenerId: <span class="token number">2</span>
<span class="token variable"><span class="token variable">\`</span>---ts<span class="token operator">=</span><span class="token number">2023</span>-02-15 <span class="token number">14</span>:07:27<span class="token punctuation">;</span><span class="token assign-left variable">thread_name</span><span class="token operator">=</span>main<span class="token punctuation">;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">is_daemon</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token assign-left variable">TCCL</span><span class="token operator">=</span>sun.misc.Launcher$AppClassLoader@5c647e05
    <span class="token variable">\`</span></span>---<span class="token punctuation">[</span><span class="token number">1</span>.4705ms<span class="token punctuation">]</span> org.example.TestDemo:hello<span class="token punctuation">(</span><span class="token punctuation">)</span>
        +---<span class="token punctuation">[</span><span class="token number">34.68</span>% <span class="token number">0</span>.51ms <span class="token punctuation">]</span> org.example.TestDemo:sm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#23</span>
        +---<span class="token punctuation">[</span><span class="token number">1.79</span>% <span class="token number">0</span>.0263ms <span class="token punctuation">]</span> java.lang.StringBuilder:<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#24</span>
        +---<span class="token punctuation">[</span><span class="token number">1.53</span>% <span class="token number">0</span>.0225ms <span class="token punctuation">]</span> java.lang.Object:getClass<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#24</span>
        +---<span class="token punctuation">[</span><span class="token number">1.58</span>% <span class="token number">0</span>.0232ms <span class="token punctuation">]</span> java.lang.Class:getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#24</span>
        +---<span class="token punctuation">[</span><span class="token number">3.52</span>% <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">0</span>.0165ms,max<span class="token operator">=</span><span class="token number">0</span>.0352ms,total<span class="token operator">=</span><span class="token number">0</span>.0517ms,count<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">]</span> java.lang.StringBuilder:append<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#24</span>
        +---<span class="token punctuation">[</span><span class="token number">1.23</span>% <span class="token number">0</span>.0181ms <span class="token punctuation">]</span> java.lang.StringBuilder:toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#24</span>
        \`---<span class="token punctuation">[</span><span class="token number">30.47</span>% <span class="token number">0</span>.4481ms <span class="token punctuation">]</span> java.io.PrintStream:println<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#24</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令中的<code>--skipJDKMethod false</code>参数可以让结果不跳过JDK。如果不加这个参数只打印用户的方法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>arthas@15736<span class="token punctuation">]</span>$ trace org.example.TestDemo hello
Press Q or Ctrl+C to abort.
Affect<span class="token punctuation">(</span>class count: <span class="token number">1</span> , method count: <span class="token number">1</span><span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">120</span> ms, listenerId: <span class="token number">1</span>
<span class="token variable"><span class="token variable">\`</span>---ts<span class="token operator">=</span><span class="token number">2023</span>-02-15 <span class="token number">14</span>:07:20<span class="token punctuation">;</span><span class="token assign-left variable">thread_name</span><span class="token operator">=</span>main<span class="token punctuation">;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">is_daemon</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token assign-left variable">TCCL</span><span class="token operator">=</span>sun.misc.Launcher$AppClassLoader@5c647e05
    <span class="token variable">\`</span></span>---<span class="token punctuation">[</span><span class="token number">0</span>.654ms<span class="token punctuation">]</span> org.example.TestDemo:hello<span class="token punctuation">(</span><span class="token punctuation">)</span>
        \`---<span class="token punctuation">[</span><span class="token number">35.46</span>% <span class="token number">0</span>.2319ms <span class="token punctuation">]</span> org.example.TestDemo:sm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#23</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后看下<code>hello</code>方法的字节码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
   <span class="token constant">L0</span>
    <span class="token constant">LINENUMBER</span> <span class="token number">23</span> <span class="token constant">L0</span>
    <span class="token constant">INVOKESTATIC</span> org<span class="token operator">/</span>example<span class="token operator">/</span><span class="token class-name">TestDemo</span><span class="token punctuation">.</span>sm <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
   <span class="token constant">L1</span>
    <span class="token constant">LINENUMBER</span> <span class="token number">24</span> <span class="token constant">L1</span>
    <span class="token constant">GETSTATIC</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">System</span><span class="token punctuation">.</span>out <span class="token operator">:</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>io<span class="token operator">/</span><span class="token class-name">PrintStream</span><span class="token punctuation">;</span>
    <span class="token constant">NEW</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span>
    <span class="token constant">DUP</span>
    <span class="token constant">INVOKESPECIAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    <span class="token constant">ALOAD</span> <span class="token number">0</span>
    <span class="token constant">INVOKEVIRTUAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">.</span>getClass <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Class</span><span class="token punctuation">;</span>
    <span class="token constant">INVOKEVIRTUAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Class</span><span class="token punctuation">.</span>getName <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>
    <span class="token constant">INVOKEVIRTUAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">;</span>
    <span class="token constant">LDC</span> <span class="token string">&quot;hello&quot;</span>
    <span class="token constant">INVOKEVIRTUAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">;</span>
    <span class="token constant">INVOKEVIRTUAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">.</span>toString <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>
    <span class="token constant">INVOKEVIRTUAL</span> java<span class="token operator">/</span>io<span class="token operator">/</span><span class="token class-name">PrintStream</span><span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>
   <span class="token constant">L2</span>
    <span class="token constant">LINENUMBER</span> <span class="token number">25</span> <span class="token constant">L2</span>
    <span class="token constant">RETURN</span>
   <span class="token constant">L3</span>
    <span class="token constant">LOCALVARIABLE</span> <span class="token keyword">this</span> <span class="token class-name">Lorg</span><span class="token operator">/</span>example<span class="token operator">/</span><span class="token class-name">TestDemo</span><span class="token punctuation">;</span> <span class="token constant">L0</span> <span class="token constant">L3</span> <span class="token number">0</span>
    <span class="token constant">MAXSTACK</span> <span class="token operator">=</span> <span class="token number">3</span>
    <span class="token constant">MAXLOCALS</span> <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比之后可以发现trace的每个entry都对应字节码中的一个<code>INVOKEXXX</code>。所以trace就是在<code>INVOKEXXX</code>前后插入代码进行的调用时间统计。</p><p><code>INVOKEXXX</code>是JVM字节码中的方法调用指令分别为：</p><p><code>invokevirtual</code>、<code>invokeinterface</code>、<code>invokespecial</code>、<code>invokestatic</code>、<code>invokedynamic</code></p><ul><li>invokevirtual</li></ul><p>用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），支持多态。</p><p>这也是Java语言中最常见的方法分派方式。</p><ul><li>invokeinterface</li></ul><p>用于调用接口方法，它会在运行时搜索由特定对象所实现的这个接口方法，并找出适合的方法进行调用。</p><ul><li>invokespecial指令</li></ul><p>用于调用一些需要特殊处理的实例方法，包括实例初始化方法（构造器)、私有方法和父类方法。这些方法都是静态类型绑定的，不会在调用时进行动态派发。</p><ul><li>invokestatic指令</li></ul><p>用于调用命名类中的类方法(static方法）。这是静态绑定的。</p><ul><li>invokedynamic指令</li></ul><p>调用动态绑定的方法，这个是JDK 1.7后新加入的指令。</p><div class="custom-container tip"><p class="custom-container-title">拓展</p><p>查看字节码文件可以使用IDEA自带的工具，简单方便：</p><p><img src="https://raw.githubusercontent.com/ying010/pic-repo/master/img/2023/02/15/20230215-141456.png" alt="image-20230215141454113"></p></div>`,27),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","原理解析.html.vue"]]);export{k as default};
