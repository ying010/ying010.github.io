import{_ as a,n,p as s,a0 as e}from"./framework-76e35361.js";const i={},r=e(`<h1 id="内存模型" tabindex="-1"><a class="header-anchor" href="#内存模型" aria-hidden="true">#</a> 内存模型</h1><h2 id="模型图" tabindex="-1"><a class="header-anchor" href="#模型图" aria-hidden="true">#</a> 模型图</h2><p><img src="https://raw.githubusercontent.com/ying010/pic-repo/master/img/20220408105205.png" alt="JVM内存模型"></p><h2 id="_1-1-程序计数器" tabindex="-1"><a class="header-anchor" href="#_1-1-程序计数器" aria-hidden="true">#</a> 1.1 程序计数器</h2><p>Java 源代码 --》（编译）二进制字节码 JVM指令 --》（解释器）解释为机器码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>       <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
       <span class="token number">3</span><span class="token operator">:</span> astore_1
       <span class="token number">4</span><span class="token operator">:</span> aload_1
       <span class="token number">5</span><span class="token operator">:</span> iconst_1
       <span class="token number">6</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
       <span class="token number">9</span><span class="token operator">:</span> aload_1
      <span class="token number">10</span><span class="token operator">:</span> iconst_2
      <span class="token number">11</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">14</span><span class="token operator">:</span> aload_1
      <span class="token number">15</span><span class="token operator">:</span> iconst_3
      <span class="token number">16</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">19</span><span class="token operator">:</span> <span class="token keyword">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>程序计数器作用：记住下一条JVM指令的执行地址</li></ul><p>物理上通过寄存器实现</p><ul><li>特点： <ul><li>程序计数器是线程私有的</li><li>程序计数器不会出现内存溢出</li></ul></li></ul><h2 id="_1-2-栈" tabindex="-1"><a class="header-anchor" href="#_1-2-栈" aria-hidden="true">#</a> 1.2 栈</h2><ul><li><p>**定义 **：线程运行需要的内存空间，由栈帧组成</p><ul><li>栈帧：每个方法运行时需要的内存</li><li>每个线程只能由一个活动栈帧，对应当前正在执行的方法</li></ul></li><li><p>垃圾回收只回收堆内存，不涉及栈内存</p></li></ul><h3 id="_1-2-1栈内存溢出" tabindex="-1"><a class="header-anchor" href="#_1-2-1栈内存溢出" aria-hidden="true">#</a> 1.2.1栈内存溢出</h3><p>异常：<code> java.lang.StackOverflowError</code></p><ul><li>栈帧过多导致 <ul><li>循环调用 <ul><li>没有正确关闭的递归</li><li>三方库导致</li></ul></li></ul></li><li>栈帧过大</li></ul><h2 id="_1-3-堆" tabindex="-1"><a class="header-anchor" href="#_1-3-堆" aria-hidden="true">#</a> 1.3 堆</h2><h3 id="_1-3-1-垃圾回收" tabindex="-1"><a class="header-anchor" href="#_1-3-1-垃圾回收" aria-hidden="true">#</a> 1.3.1 垃圾回收</h3><p><img src="https://raw.githubusercontent.com/ying010/pic-repo/master/img/2024/05/31/20240531105325.svg" alt="未命名文件 (2)"></p><p><img src="https://raw.githubusercontent.com/ying010/pic-repo/master/img/2024/05/31/20240531105611.svg" alt="未命名文件 (2)"></p>`,18),l=[r];function t(o,p){return n(),s("div",null,l)}const d=a(i,[["render",t],["__file","model.html.vue"]]);export{d as default};
